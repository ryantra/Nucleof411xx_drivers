
nucleof41xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b50  08000b50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b60  08000b60  00010b68  2**0
                  CONTENTS
  4 .ARM          00000000  08000b60  08000b60  00010b68  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b60  08000b68  00010b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b60  08000b60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b64  08000b64  00010b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b68  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b68  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b8a  00000000  00000000  00010b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000695  00000000  00000000  00013722  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  00013db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00013f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002690  00000000  00000000  000140b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000162b  00000000  00000000  00016740  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009b89  00000000  00000000  00017d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000218f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  00021970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000b38 	.word	0x08000b38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000b38 	.word	0x08000b38

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <delay>:
#define HIGH 1
#define LOW 0
#define BTN_PRESSED LOW

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <SPI2_GPIOInits>:
 * SS    10  // Slave Select . Arduino SPI pins respond only if SS pulled low by the master
 *
 */

void SPI2_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <SPI2_GPIOInits+0x4c>)
 800021c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000232:	230d      	movs	r3, #13
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f963 	bl	8000504 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800023e:	230f      	movs	r3, #15
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f95d 	bl	8000504 <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800024a:	230c      	movs	r3, #12
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f957 	bl	8000504 <GPIO_Init>


}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40020400 	.word	0x40020400

08000264 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <SPI2_Inits+0x38>)
 800026c:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026e:	2301      	movs	r3, #1
 8000270:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000272:	2301      	movs	r3, #1
 8000274:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000276:	2304      	movs	r3, #4
 8000278:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800027a:	2300      	movs	r3, #0
 800027c:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000282:	2300      	movs	r3, #0
 8000284:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000286:	2300      	movs	r3, #0
 8000288:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800028a:	463b      	mov	r3, r7
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fb59 	bl	8000944 <SPI_Init>
}
 8000292:	bf00      	nop
 8000294:	3718      	adds	r7, #24
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40003800 	.word	0x40003800

080002a0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <GPIO_ButtonInit+0x2c>)
 80002a8:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002aa:	230d      	movs	r3, #13
 80002ac:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b2:	2302      	movs	r3, #2
 80002b4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002b6:	2301      	movs	r3, #1
 80002b8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f921 	bl	8000504 <GPIO_Init>

}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40020800 	.word	0x40020800

080002d0 <main>:


int main(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b087      	sub	sp, #28
 80002d4:	af00      	add	r7, sp, #0
	char user_data[] = "Hello Yantra";
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <main+0x90>)
 80002d8:	f107 0408 	add.w	r4, r7, #8
 80002dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002de:	c407      	stmia	r4!, {r0, r1, r2}
 80002e0:	7023      	strb	r3, [r4, #0]

	GPIO_ButtonInit();
 80002e2:	f7ff ffdd 	bl	80002a0 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002e6:	f7ff ff95 	bl	8000214 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002ea:	f7ff ffbb 	bl	8000264 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 80002ee:	2101      	movs	r1, #1
 80002f0:	481c      	ldr	r0, [pc, #112]	; (8000364 <main+0x94>)
 80002f2:	f000 fbe1 	bl	8000ab8 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! (GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) == BTN_PRESSED) );
 80002f6:	bf00      	nop
 80002f8:	210d      	movs	r1, #13
 80002fa:	481b      	ldr	r0, [pc, #108]	; (8000368 <main+0x98>)
 80002fc:	f000 fa84 	bl	8000808 <GPIO_ReadFromInputPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d1f8      	bne.n	80002f8 <main+0x28>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000306:	f7ff ff6f 	bl	80001e8 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800030a:	2101      	movs	r1, #1
 800030c:	4815      	ldr	r0, [pc, #84]	; (8000364 <main+0x94>)
 800030e:	f000 fbb7 	bl	8000a80 <SPI_PeripheralControl>

		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff5e 	bl	80001d8 <strlen>
 800031c:	4603      	mov	r3, r0
 800031e:	b2db      	uxtb	r3, r3
 8000320:	71fb      	strb	r3, [r7, #7]
		SPI_SendData(SPI2,&dataLen,1);
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	2201      	movs	r2, #1
 8000326:	4619      	mov	r1, r3
 8000328:	480e      	ldr	r0, [pc, #56]	; (8000364 <main+0x94>)
 800032a:	f000 fb73 	bl	8000a14 <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff50 	bl	80001d8 <strlen>
 8000338:	4602      	mov	r2, r0
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	4619      	mov	r1, r3
 8000340:	4808      	ldr	r0, [pc, #32]	; (8000364 <main+0x94>)
 8000342:	f000 fb67 	bl	8000a14 <SPI_SendData>

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000346:	bf00      	nop
 8000348:	2180      	movs	r1, #128	; 0x80
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <main+0x94>)
 800034c:	f000 fb4e 	bl	80009ec <SPI_GetFlagStatus>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d1f8      	bne.n	8000348 <main+0x78>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000356:	2100      	movs	r1, #0
 8000358:	4802      	ldr	r0, [pc, #8]	; (8000364 <main+0x94>)
 800035a:	f000 fb91 	bl	8000a80 <SPI_PeripheralControl>
	{
 800035e:	e7ca      	b.n	80002f6 <main+0x26>
 8000360:	08000b50 	.word	0x08000b50
 8000364:	40003800 	.word	0x40003800
 8000368:	40020800 	.word	0x40020800

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490e      	ldr	r1, [pc, #56]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0b      	ldr	r4, [pc, #44]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800039a:	f3af 8000 	nop.w

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 fba7 	bl	8000af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ff95 	bl	80002d0 <main>

080003a6 <LoopForever>:

LoopForever:
    b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	08000b68 	.word	0x08000b68
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <GPIO_PeriClockControl>:
 *
 * @note			- none
 *
 **********************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003d0:	78fb      	ldrb	r3, [r7, #3]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d141      	bne.n	800045a <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a43      	ldr	r2, [pc, #268]	; (80004e8 <GPIO_PeriClockControl+0x124>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003de:	4b43      	ldr	r3, [pc, #268]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a42      	ldr	r2, [pc, #264]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80003ea:	e077      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a40      	ldr	r2, [pc, #256]	; (80004f0 <GPIO_PeriClockControl+0x12c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003f4:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a3c      	ldr	r2, [pc, #240]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80003fa:	f043 0302 	orr.w	r3, r3, #2
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e06c      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a3b      	ldr	r2, [pc, #236]	; (80004f4 <GPIO_PeriClockControl+0x130>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800040a:	4b38      	ldr	r3, [pc, #224]	; (80004ec <GPIO_PeriClockControl+0x128>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a37      	ldr	r2, [pc, #220]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000410:	f043 0304 	orr.w	r3, r3, #4
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e061      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a37      	ldr	r2, [pc, #220]	; (80004f8 <GPIO_PeriClockControl+0x134>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000420:	4b32      	ldr	r3, [pc, #200]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a31      	ldr	r2, [pc, #196]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e056      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a32      	ldr	r2, [pc, #200]	; (80004fc <GPIO_PeriClockControl+0x138>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000436:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a2c      	ldr	r2, [pc, #176]	; (80004ec <GPIO_PeriClockControl+0x128>)
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e04b      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a2e      	ldr	r2, [pc, #184]	; (8000500 <GPIO_PeriClockControl+0x13c>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d147      	bne.n	80004dc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <GPIO_PeriClockControl+0x128>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a26      	ldr	r2, [pc, #152]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e040      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a22      	ldr	r2, [pc, #136]	; (80004e8 <GPIO_PeriClockControl+0x124>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a21      	ldr	r2, [pc, #132]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e035      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <GPIO_PeriClockControl+0x12c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <GPIO_PeriClockControl+0x128>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <GPIO_PeriClockControl+0x128>)
 800047e:	f023 0302 	bic.w	r3, r3, #2
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	e02a      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <GPIO_PeriClockControl+0x130>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <GPIO_PeriClockControl+0x128>)
 8000494:	f023 0304 	bic.w	r3, r3, #4
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049a:	e01f      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <GPIO_PeriClockControl+0x134>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a10      	ldr	r2, [pc, #64]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80004aa:	f023 0308 	bic.w	r3, r3, #8
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b0:	e014      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a11      	ldr	r2, [pc, #68]	; (80004fc <GPIO_PeriClockControl+0x138>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80004c0:	f023 0310 	bic.w	r3, r3, #16
 80004c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c6:	e009      	b.n	80004dc <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <GPIO_PeriClockControl+0x13c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d105      	bne.n	80004dc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4a05      	ldr	r2, [pc, #20]	; (80004ec <GPIO_PeriClockControl+0x128>)
 80004d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020800 	.word	0x40020800
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	40021000 	.word	0x40021000
 8000500:	40021c00 	.word	0x40021c00

08000504 <GPIO_Init>:
 *
 * @note			-
 *
 **********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;		//temp.register
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]

	//enabling the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff54 	bl	80003c4 <GPIO_PeriClockControl>


	//1. Configure the mode of the GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d81f      	bhi.n	8000564 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	461a      	mov	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	791b      	ldrb	r3, [r3, #4]
 8000540:	4619      	mov	r1, r3
 8000542:	2303      	movs	r3, #3
 8000544:	408b      	lsls	r3, r1
 8000546:	43db      	mvns	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	400a      	ands	r2, r1
 8000550:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	e0a1      	b.n	80006a8 <GPIO_Init+0x1a4>

	}else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	2b04      	cmp	r3, #4
 800056a:	d117      	bne.n	800059c <GPIO_Init+0x98>
		{
			//configure FTSR
			EXTI->FTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056c:	4b9d      	ldr	r3, [pc, #628]	; (80007e4 <GPIO_Init+0x2e0>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7912      	ldrb	r2, [r2, #4]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	4611      	mov	r1, r2
 800057c:	4a99      	ldr	r2, [pc, #612]	; (80007e4 <GPIO_Init+0x2e0>)
 800057e:	430b      	orrs	r3, r1
 8000580:	60d3      	str	r3, [r2, #12]
			//clearing the corresponding RTSR bit
			EXTI->RTSR 	&= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b98      	ldr	r3, [pc, #608]	; (80007e4 <GPIO_Init+0x2e0>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	43d2      	mvns	r2, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a93      	ldr	r2, [pc, #588]	; (80007e4 <GPIO_Init+0x2e0>)
 8000596:	400b      	ands	r3, r1
 8000598:	6093      	str	r3, [r2, #8]
 800059a:	e035      	b.n	8000608 <GPIO_Init+0x104>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d117      	bne.n	80005d4 <GPIO_Init+0xd0>
		{
			//configure RTSR
			EXTI->RTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	4b8f      	ldr	r3, [pc, #572]	; (80007e4 <GPIO_Init+0x2e0>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a8b      	ldr	r2, [pc, #556]	; (80007e4 <GPIO_Init+0x2e0>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6093      	str	r3, [r2, #8]
			//clearing the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b8a      	ldr	r3, [pc, #552]	; (80007e4 <GPIO_Init+0x2e0>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a85      	ldr	r2, [pc, #532]	; (80007e4 <GPIO_Init+0x2e0>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	e019      	b.n	8000608 <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	2b06      	cmp	r3, #6
 80005da:	d115      	bne.n	8000608 <GPIO_Init+0x104>
		{
			//configure both FTSR and RTSR
			EXTI->FTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	4b81      	ldr	r3, [pc, #516]	; (80007e4 <GPIO_Init+0x2e0>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a7d      	ldr	r2, [pc, #500]	; (80007e4 <GPIO_Init+0x2e0>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	4b7c      	ldr	r3, [pc, #496]	; (80007e4 <GPIO_Init+0x2e0>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	7912      	ldrb	r2, [r2, #4]
 80005fa:	4611      	mov	r1, r2
 80005fc:	2201      	movs	r2, #1
 80005fe:	408a      	lsls	r2, r1
 8000600:	4611      	mov	r1, r2
 8000602:	4a78      	ldr	r2, [pc, #480]	; (80007e4 <GPIO_Init+0x2e0>)
 8000604:	430b      	orrs	r3, r1
 8000606:	6093      	str	r3, [r2, #8]
		}

		//configuring the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 	= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	089b      	lsrs	r3, r3, #2
 800060e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2	= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	f003 0303 	and.w	r3, r3, #3
 8000618:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a72      	ldr	r2, [pc, #456]	; (80007e8 <GPIO_Init+0x2e4>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d024      	beq.n	800066e <GPIO_Init+0x16a>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a70      	ldr	r2, [pc, #448]	; (80007ec <GPIO_Init+0x2e8>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d01d      	beq.n	800066a <GPIO_Init+0x166>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a6f      	ldr	r2, [pc, #444]	; (80007f0 <GPIO_Init+0x2ec>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d016      	beq.n	8000666 <GPIO_Init+0x162>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a6d      	ldr	r2, [pc, #436]	; (80007f4 <GPIO_Init+0x2f0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d00f      	beq.n	8000662 <GPIO_Init+0x15e>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a6c      	ldr	r2, [pc, #432]	; (80007f8 <GPIO_Init+0x2f4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d008      	beq.n	800065e <GPIO_Init+0x15a>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a6a      	ldr	r2, [pc, #424]	; (80007fc <GPIO_Init+0x2f8>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <GPIO_Init+0x156>
 8000656:	2305      	movs	r3, #5
 8000658:	e00a      	b.n	8000670 <GPIO_Init+0x16c>
 800065a:	2300      	movs	r3, #0
 800065c:	e008      	b.n	8000670 <GPIO_Init+0x16c>
 800065e:	2304      	movs	r3, #4
 8000660:	e006      	b.n	8000670 <GPIO_Init+0x16c>
 8000662:	2303      	movs	r3, #3
 8000664:	e004      	b.n	8000670 <GPIO_Init+0x16c>
 8000666:	2302      	movs	r3, #2
 8000668:	e002      	b.n	8000670 <GPIO_Init+0x16c>
 800066a:	2301      	movs	r3, #1
 800066c:	e000      	b.n	8000670 <GPIO_Init+0x16c>
 800066e:	2300      	movs	r3, #0
 8000670:	747b      	strb	r3, [r7, #17]
		//enabling SYSCFG clk
		SYSCFG_PCLK_EN();
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <GPIO_Init+0x2fc>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a62      	ldr	r2, [pc, #392]	; (8000800 <GPIO_Init+0x2fc>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800067e:	7c7a      	ldrb	r2, [r7, #17]
 8000680:	7cbb      	ldrb	r3, [r7, #18]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	fa02 f103 	lsl.w	r1, r2, r3
 8000688:	4a5e      	ldr	r2, [pc, #376]	; (8000804 <GPIO_Init+0x300>)
 800068a:	7cfb      	ldrb	r3, [r7, #19]
 800068c:	3302      	adds	r3, #2
 800068e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000692:	4b54      	ldr	r3, [pc, #336]	; (80007e4 <GPIO_Init+0x2e0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	7912      	ldrb	r2, [r2, #4]
 800069a:	4611      	mov	r1, r2
 800069c:	2201      	movs	r2, #1
 800069e:	408a      	lsls	r2, r1
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a50      	ldr	r2, [pc, #320]	; (80007e4 <GPIO_Init+0x2e0>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	799b      	ldrb	r3, [r3, #6]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2303      	movs	r3, #3
 80006cc:	408b      	lsls	r3, r1
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	400a      	ands	r2, r1
 80006d8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//setting
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6899      	ldr	r1, [r3, #8]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	609a      	str	r2, [r3, #8]

	temp = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

	//3. COnfigure the PuPd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	79db      	ldrb	r3, [r3, #7]
 80006f2:	461a      	mov	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR 	&= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	4619      	mov	r1, r3
 800070c:	2303      	movs	r3, #3
 800070e:	408b      	lsls	r3, r1
 8000710:	43db      	mvns	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR 	|= temp;	//setting
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	430a      	orrs	r2, r1
 800072a:	60da      	str	r2, [r3, #12]

	temp = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
	//4. Configure the OpType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7a1b      	ldrb	r3, [r3, #8]
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	4619      	mov	r1, r3
 800074c:	2301      	movs	r3, #1
 800074e:	408b      	lsls	r3, r1
 8000750:	43db      	mvns	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	400a      	ands	r2, r1
 800075a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	//setting
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6859      	ldr	r1, [r3, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	430a      	orrs	r2, r1
 800076a:	605a      	str	r2, [r3, #4]

	temp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

	//5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d131      	bne.n	80007dc <GPIO_Init+0x2d8>
	{
		//configure the alt function register
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	08db      	lsrs	r3, r3, #3
 800077e:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	f003 0307 	and.w	r3, r3, #7
 8000788:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));	//clearing
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	7c3a      	ldrb	r2, [r7, #16]
 8000790:	3208      	adds	r2, #8
 8000792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	220f      	movs	r2, #15
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7c3a      	ldrb	r2, [r7, #16]
 80007aa:	4001      	ands	r1, r0
 80007ac:	3208      	adds	r2, #8
 80007ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	7c3a      	ldrb	r2, [r7, #16]
 80007b8:	3208      	adds	r2, #8
 80007ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a5b      	ldrb	r3, [r3, #9]
 80007c2:	461a      	mov	r2, r3
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	7c3a      	ldrb	r2, [r7, #16]
 80007d4:	4301      	orrs	r1, r0
 80007d6:	3208      	adds	r2, #8
 80007d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40013c00 	.word	0x40013c00
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40021c00 	.word	0x40021c00
 8000800:	40023800 	.word	0x40023800
 8000804:	40013800 	.word	0x40013800

08000808 <GPIO_ReadFromInputPin>:
 *
 * @note			-
 *
 **********************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691a      	ldr	r2, [r3, #16]
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	fa22 f303 	lsr.w	r3, r2, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
	return value;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <SPI_PeriClockControl>:
 *
 * @note			- n/a
 *
 **********************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d136      	bne.n	80008b4 <SPI_PeriClockControl+0x80>
	{
		if(pSPIx == SPI1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a38      	ldr	r2, [pc, #224]	; (800092c <SPI_PeriClockControl+0xf8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a37      	ldr	r2, [pc, #220]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000854:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI5_PCLK_DI();
		}
	}

}
 800085a:	e061      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a35      	ldr	r2, [pc, #212]	; (8000934 <SPI_PeriClockControl+0x100>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <SPI_PeriClockControl+0xfc>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000870:	e056      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI3)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a30      	ldr	r2, [pc, #192]	; (8000938 <SPI_PeriClockControl+0x104>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <SPI_PeriClockControl+0xfc>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a2c      	ldr	r2, [pc, #176]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000886:	e04b      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI4)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a2c      	ldr	r2, [pc, #176]	; (800093c <SPI_PeriClockControl+0x108>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800089a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800089c:	e040      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI5)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <SPI_PeriClockControl+0x10c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d13c      	bne.n	8000920 <SPI_PeriClockControl+0xec>
			SPI5_PCLK_EN();
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a21      	ldr	r2, [pc, #132]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008b2:	e035      	b.n	8000920 <SPI_PeriClockControl+0xec>
		if(pSPIx == SPI1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a1d      	ldr	r2, [pc, #116]	; (800092c <SPI_PeriClockControl+0xf8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <SPI_PeriClockControl+0x96>
			SPI1_PCLK_DI();
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008c6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008c8:	e02a      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI2)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <SPI_PeriClockControl+0x100>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <SPI_PeriClockControl+0xac>
			SPI2_PCLK_DI();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008de:	e01f      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <SPI_PeriClockControl+0x104>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <SPI_PeriClockControl+0xc2>
			SPI3_PCLK_DI();
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <SPI_PeriClockControl+0xfc>)
 80008ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f4:	e014      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI4)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <SPI_PeriClockControl+0x108>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <SPI_PeriClockControl+0xd8>
			SPI4_PCLK_DI();
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
}
 800090a:	e009      	b.n	8000920 <SPI_PeriClockControl+0xec>
		}else if (pSPIx == SPI5)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <SPI_PeriClockControl+0x10c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d105      	bne.n	8000920 <SPI_PeriClockControl+0xec>
			SPI5_PCLK_DI();
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SPI_PeriClockControl+0xfc>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SPI_PeriClockControl+0xfc>)
 800091a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800091e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40013000 	.word	0x40013000
 8000930:	40023800 	.word	0x40023800
 8000934:	40003800 	.word	0x40003800
 8000938:	40003c00 	.word	0x40003c00
 800093c:	40013400 	.word	0x40013400
 8000940:	40015000 	.word	0x40015000

08000944 <SPI_Init>:
 *
 * @note			-
 *
 **********************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff6e 	bl	8000834 <SPI_PeriClockControl>
	//1.configure SPI_CR1 register
	uint32_t tempreg = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

	//2.configuring device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4313      	orrs	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]

	//configure the bus
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	795b      	ldrb	r3, [r3, #5]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e014      	b.n	80009a6 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	795b      	ldrb	r3, [r3, #5]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d104      	bne.n	800098e <SPI_Init+0x4a>
	{
		//bidi mode be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e00b      	b.n	80009a6 <SPI_Init+0x62>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d107      	bne.n	80009a6 <SPI_Init+0x62>
	{
		//bidi should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800099c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a4:	60fb      	str	r3, [r7, #12]
	}

	//3.configure the SPI baud rate
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	799b      	ldrb	r3, [r3, #6]
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	461a      	mov	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]

	//4.configure DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	79db      	ldrb	r3, [r3, #7]
 80009b8:	02db      	lsls	r3, r3, #11
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4313      	orrs	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]

	//5.configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7a1b      	ldrb	r3, [r3, #8]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

	//6.configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7a5b      	ldrb	r3, [r3, #9]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	601a      	str	r2, [r3, #0]

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SPI_GetFlagStatus>:


}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	4013      	ands	r3, r2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <SPI_SendData>:
 *
 * @note			-
 *
 **********************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a20:	e007      	b.n	8000a32 <SPI_SendData+0x1e>
	{
		//1.wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a22:	bf00      	nop
 8000a24:	2102      	movs	r1, #2
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff ffe0 	bl	80009ec <SPI_GetFlagStatus>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f8      	beq.n	8000a24 <SPI_SendData+0x10>
	while(Len > 0)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1f4      	bne.n	8000a22 <SPI_SendData+0xe>
	}

	//2.check the DFF bit in CR1
	if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00e      	beq.n	8000a62 <SPI_SendData+0x4e>
	{
		//16bit DFF
		//load data in to DR
		pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60da      	str	r2, [r3, #12]
		Len--;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
		Len--;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
		(uint16_t*)pTxBuffer++;
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
		pSPIx->DR = *pTxBuffer;
		Len--;
		pTxBuffer++;
	}

}
 8000a60:	e00a      	b.n	8000a78 <SPI_SendData+0x64>
		pSPIx->DR = *pTxBuffer;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	60da      	str	r2, [r3, #12]
		Len--;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SPI_PeripheralControl>:
 *
 * @note			-
 *
 **********************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d106      	bne.n	8000aa0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]

	}else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a9e:	e005      	b.n	8000aac <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SPI_SSOEConfig>:
 *
 * @note			-
 *
 **********************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d106      	bne.n	8000ad8 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f043 0204 	orr.w	r2, r3, #4
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}

}
 8000ad6:	e005      	b.n	8000ae4 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f023 0204 	bic.w	r2, r3, #4
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	605a      	str	r2, [r3, #4]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <__libc_init_array>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	4e0d      	ldr	r6, [pc, #52]	; (8000b28 <__libc_init_array+0x38>)
 8000af4:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__libc_init_array+0x3c>)
 8000af6:	1ba4      	subs	r4, r4, r6
 8000af8:	10a4      	asrs	r4, r4, #2
 8000afa:	2500      	movs	r5, #0
 8000afc:	42a5      	cmp	r5, r4
 8000afe:	d109      	bne.n	8000b14 <__libc_init_array+0x24>
 8000b00:	4e0b      	ldr	r6, [pc, #44]	; (8000b30 <__libc_init_array+0x40>)
 8000b02:	4c0c      	ldr	r4, [pc, #48]	; (8000b34 <__libc_init_array+0x44>)
 8000b04:	f000 f818 	bl	8000b38 <_init>
 8000b08:	1ba4      	subs	r4, r4, r6
 8000b0a:	10a4      	asrs	r4, r4, #2
 8000b0c:	2500      	movs	r5, #0
 8000b0e:	42a5      	cmp	r5, r4
 8000b10:	d105      	bne.n	8000b1e <__libc_init_array+0x2e>
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
 8000b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b18:	4798      	blx	r3
 8000b1a:	3501      	adds	r5, #1
 8000b1c:	e7ee      	b.n	8000afc <__libc_init_array+0xc>
 8000b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b22:	4798      	blx	r3
 8000b24:	3501      	adds	r5, #1
 8000b26:	e7f2      	b.n	8000b0e <__libc_init_array+0x1e>
 8000b28:	08000b60 	.word	0x08000b60
 8000b2c:	08000b60 	.word	0x08000b60
 8000b30:	08000b60 	.word	0x08000b60
 8000b34:	08000b64 	.word	0x08000b64

08000b38 <_init>:
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	bf00      	nop
 8000b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3e:	bc08      	pop	{r3}
 8000b40:	469e      	mov	lr, r3
 8000b42:	4770      	bx	lr

08000b44 <_fini>:
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	bf00      	nop
 8000b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4a:	bc08      	pop	{r3}
 8000b4c:	469e      	mov	lr, r3
 8000b4e:	4770      	bx	lr
