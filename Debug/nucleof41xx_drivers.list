
nucleof41xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000212c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080022cc  080022cc  000122cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002430  08002430  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002430  08002430  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002430  08002430  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000078  080024b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080024b0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004433  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000af1  00000000  00000000  000244db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000240  00000000  00000000  00024fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e8  00000000  00000000  00025210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000030e4  00000000  00000000  000253f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000021ed  00000000  00000000  000284dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b24e  00000000  00000000  0002a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00035917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000103c  00000000  00000000  00035994  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000369d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00036a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080022b4 	.word	0x080022b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080022b4 	.word	0x080022b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <get_day_of_week>:

#include <stdio.h>
#include "ds1307.h"

char* get_day_of_week(uint8_t i)
{
 8000280:	b4b0      	push	{r4, r5, r7}
 8000282:	b08b      	sub	sp, #44	; 0x2c
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <get_day_of_week+0x38>)
 800028c:	f107 040c 	add.w	r4, r7, #12
 8000290:	461d      	mov	r5, r3
 8000292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000296:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800029a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days[i-1];
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80002a8:	4413      	add	r3, r2
 80002aa:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	372c      	adds	r7, #44	; 0x2c
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bcb0      	pop	{r4, r5, r7}
 80002b6:	4770      	bx	lr
 80002b8:	08002310 	.word	0x08002310

080002bc <number_to_string>:


void number_to_string(uint8_t num, char* buf)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b09      	cmp	r3, #9
 80002cc:	d809      	bhi.n	80002e2 <number_to_string+0x26>
	{
		buf[0] = '0';
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	2230      	movs	r2, #48	; 0x30
 80002d2:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	3301      	adds	r3, #1
 80002d8:	79fa      	ldrb	r2, [r7, #7]
 80002da:	3230      	adds	r2, #48	; 0x30
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
		{
			buf[0] = (num/10) + 48;
			buf[1]= (num % 10) + 48;
		}
}
 80002e0:	e01f      	b.n	8000322 <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2b09      	cmp	r3, #9
 80002e6:	d91c      	bls.n	8000322 <number_to_string+0x66>
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b62      	cmp	r3, #98	; 0x62
 80002ec:	d819      	bhi.n	8000322 <number_to_string+0x66>
			buf[0] = (num/10) + 48;
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <number_to_string+0x74>)
 80002f2:	fba2 2303 	umull	r2, r3, r2, r3
 80002f6:	08db      	lsrs	r3, r3, #3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	3330      	adds	r3, #48	; 0x30
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	701a      	strb	r2, [r3, #0]
			buf[1]= (num % 10) + 48;
 8000302:	79fa      	ldrb	r2, [r7, #7]
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <number_to_string+0x74>)
 8000306:	fba3 1302 	umull	r1, r3, r3, r2
 800030a:	08d9      	lsrs	r1, r3, #3
 800030c:	460b      	mov	r3, r1
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	440b      	add	r3, r1
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	b2da      	uxtb	r2, r3
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	3301      	adds	r3, #1
 800031c:	3230      	adds	r2, #48	; 0x30
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	cccccccd 	.word	0xcccccccd

08000334 <time_to_string>:

//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = ':';
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <time_to_string+0x48>)
 800033e:	223a      	movs	r2, #58	; 0x3a
 8000340:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <time_to_string+0x48>)
 8000344:	223a      	movs	r2, #58	; 0x3a
 8000346:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	490b      	ldr	r1, [pc, #44]	; (800037c <time_to_string+0x48>)
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ffb4 	bl	80002bc <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	785b      	ldrb	r3, [r3, #1]
 8000358:	4909      	ldr	r1, [pc, #36]	; (8000380 <time_to_string+0x4c>)
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffae 	bl	80002bc <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4907      	ldr	r1, [pc, #28]	; (8000384 <time_to_string+0x50>)
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffa8 	bl	80002bc <number_to_string>

	buf[8] = '\0';
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <time_to_string+0x48>)
 800036e:	2200      	movs	r2, #0
 8000370:	721a      	strb	r2, [r3, #8]

	return buf;
 8000372:	4b02      	ldr	r3, [pc, #8]	; (800037c <time_to_string+0x48>)
}
 8000374:	4618      	mov	r0, r3
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000094 	.word	0x20000094
 8000380:	20000097 	.word	0x20000097
 8000384:	2000009a 	.word	0x2000009a

08000388 <date_to_string>:

char* date_to_string(RTC_date_t *rtc_date)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <date_to_string+0x48>)
 8000392:	222f      	movs	r2, #47	; 0x2f
 8000394:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <date_to_string+0x48>)
 8000398:	222f      	movs	r2, #47	; 0x2f
 800039a:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	490b      	ldr	r1, [pc, #44]	; (80003d0 <date_to_string+0x48>)
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff8a 	bl	80002bc <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	785b      	ldrb	r3, [r3, #1]
 80003ac:	4909      	ldr	r1, [pc, #36]	; (80003d4 <date_to_string+0x4c>)
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff84 	bl	80002bc <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	789b      	ldrb	r3, [r3, #2]
 80003b8:	4907      	ldr	r1, [pc, #28]	; (80003d8 <date_to_string+0x50>)
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff7e 	bl	80002bc <number_to_string>

	buf[8] = '\0';
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <date_to_string+0x48>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	721a      	strb	r2, [r3, #8]

	return buf;
 80003c6:	4b02      	ldr	r3, [pc, #8]	; (80003d0 <date_to_string+0x48>)

}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200000a0 	.word	0x200000a0
 80003d4:	200000a3 	.word	0x200000a3
 80003d8:	200000a6 	.word	0x200000a6

080003dc <main>:

int main(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
	RTC_date_t current_date;
	RTC_time_t current_time;

	printf("RTC Demo \n");
 80003e2:	4830      	ldr	r0, [pc, #192]	; (80004a4 <main+0xc8>)
 80003e4:	f001 f854 	bl	8001490 <puts>

	if(ds1307_init())
 80003e8:	f000 f896 	bl	8000518 <ds1307_init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <main+0x1e>
	{
		printf("RTC init failure\n");
 80003f2:	482d      	ldr	r0, [pc, #180]	; (80004a8 <main+0xcc>)
 80003f4:	f001 f84c 	bl	8001490 <puts>
		while(1);
 80003f8:	e7fe      	b.n	80003f8 <main+0x1c>
	}

	current_date.day 	= THURSDAY;
 80003fa:	2305      	movs	r3, #5
 80003fc:	72fb      	strb	r3, [r7, #11]
	current_date.date 	= 30;
 80003fe:	231e      	movs	r3, #30
 8000400:	723b      	strb	r3, [r7, #8]
	current_date.month 	= 5;
 8000402:	2305      	movs	r3, #5
 8000404:	727b      	strb	r3, [r7, #9]
	current_date.year 	= 91;
 8000406:	235b      	movs	r3, #91	; 0x5b
 8000408:	72bb      	strb	r3, [r7, #10]

	current_time.hours	= 4;
 800040a:	2304      	movs	r3, #4
 800040c:	71bb      	strb	r3, [r7, #6]
	current_time.minutes = 54;
 800040e:	2336      	movs	r3, #54	; 0x36
 8000410:	717b      	strb	r3, [r7, #5]
	current_time.seconds = 56;
 8000412:	2338      	movs	r3, #56	; 0x38
 8000414:	713b      	strb	r3, [r7, #4]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000416:	2301      	movs	r3, #1
 8000418:	71fb      	strb	r3, [r7, #7]

	ds1307_set_current_time(&current_time);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f899 	bl	8000554 <ds1307_set_current_time>
	ds1307_set_current_date(&current_date);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f8dd 	bl	80005e6 <ds1307_set_current_date>

	ds1307_get_current_time(&current_time);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f909 	bl	8000646 <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8000434:	f107 0308 	add.w	r3, r7, #8
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f94d 	bl	80006d8 <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b02      	cmp	r3, #2
 8000442:	d011      	beq.n	8000468 <main+0x8c>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <main+0x72>
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <main+0xd0>)
 800044c:	e000      	b.n	8000450 <main+0x74>
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <main+0xd4>)
 8000450:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s\n", time_to_string(&current_time),am_pm); //05:11:34 PM
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff6d 	bl	8000334 <time_to_string>
 800045a:	4603      	mov	r3, r0
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	4619      	mov	r1, r3
 8000460:	4814      	ldr	r0, [pc, #80]	; (80004b4 <main+0xd8>)
 8000462:	f000 ffa1 	bl	80013a8 <iprintf>
 8000466:	e008      	b.n	800047a <main+0x9e>
	}else
	{
		printf("Current time = %s \n", time_to_string(&current_time));		//05:11:34
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff62 	bl	8000334 <time_to_string>
 8000470:	4603      	mov	r3, r0
 8000472:	4619      	mov	r1, r3
 8000474:	4810      	ldr	r0, [pc, #64]	; (80004b8 <main+0xdc>)
 8000476:	f000 ff97 	bl	80013a8 <iprintf>
	}

	//05:11:34 <Thursday>
	printf("Current date = %s <%s>\n",date_to_string(&current_date),get_day_of_week(current_date.day));
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff82 	bl	8000388 <date_to_string>
 8000484:	4604      	mov	r4, r0
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fef9 	bl	8000280 <get_day_of_week>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4621      	mov	r1, r4
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <main+0xe0>)
 8000496:	f000 ff87 	bl	80013a8 <iprintf>

	return 0;
 800049a:	2300      	movs	r3, #0
}
 800049c:	4618      	mov	r0, r3
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd90      	pop	{r4, r7, pc}
 80004a4:	0800232c 	.word	0x0800232c
 80004a8:	08002338 	.word	0x08002338
 80004ac:	0800234c 	.word	0x0800234c
 80004b0:	08002350 	.word	0x08002350
 80004b4:	08002354 	.word	0x08002354
 80004b8:	0800236c 	.word	0x0800236c
 80004bc:	08002380 	.word	0x08002380

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480e      	ldr	r0, [pc, #56]	; (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490e      	ldr	r1, [pc, #56]	; (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0b      	ldr	r4, [pc, #44]	; (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004ee:	f3af 8000 	nop.w

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f000 ff2d 	bl	8001350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff ff71 	bl	80003dc <main>

080004fa <LoopForever>:

LoopForever:
    b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   r0, =_estack
 80004fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000508:	08002438 	.word	0x08002438
  ldr r2, =_sbss
 800050c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000510:	200000e4 	.word	0x200000e4

08000514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_IRQHandler>
	...

08000518 <ds1307_init>:


//if function returns 1 then CH=1
//	   	   or returns 0 then CH=0
uint8_t ds1307_init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	//pins initialization
	ds1307_i2c_pin_config();
 800051e:	f000 f90f 	bl	8000740 <ds1307_i2c_pin_config>

	//i2c peripheral initialization
	ds1307_i2c_config();
 8000522:	f000 f949 	bl	80007b8 <ds1307_i2c_config>

	//enable the i2c peripheral
	I2C_PeriClockControl(DS1307_I2C, ENABLE);
 8000526:	2101      	movs	r1, #1
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <ds1307_init+0x38>)
 800052a:	f000 fc87 	bl	8000e3c <I2C_PeriClockControl>

	//making clock halt = 0
	ds1307_write(0x00,DS1307_ADDR_SEC);
 800052e:	2100      	movs	r1, #0
 8000530:	2000      	movs	r0, #0
 8000532:	f000 f957 	bl	80007e4 <ds1307_write>

	//read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f970 	bl	800081c <ds1307_read>
 800053c:	4603      	mov	r3, r0
 800053e:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	09db      	lsrs	r3, r3, #7
 8000544:	b2db      	uxtb	r3, r3

}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40005400 	.word	0x40005400

08000554 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f979 	bl	8000858 <binary_to_bcd>
 8000566:	4603      	mov	r3, r0
 8000568:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000570:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 8000572:	7bbb      	ldrb	r3, [r7, #14]
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f934 	bl	80007e4 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f969 	bl	8000858 <binary_to_bcd>
 8000586:	4603      	mov	r3, r0
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f92a 	bl	80007e4 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f95f 	bl	8000858 <binary_to_bcd>
 800059a:	4603      	mov	r3, r0
 800059c:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	78db      	ldrb	r3, [r3, #3]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d104      	bne.n	80005b0 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e011      	b.n	80005d4 <ds1307_set_current_time+0x80>
	}else
	{
		hrs |= (1 << 6);
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b6:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hrs | (1 << 5) : hrs & ~(1 << 5);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	78db      	ldrb	r3, [r3, #3]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d104      	bne.n	80005ca <ds1307_set_current_time+0x76>
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	e003      	b.n	80005d2 <ds1307_set_current_time+0x7e>
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f023 0320 	bic.w	r3, r3, #32
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs, DS1307_ADDR_HRS);
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f903 	bl	80007e4 <ds1307_write>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <ds1307_set_current_date>:


void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f930 	bl	8000858 <binary_to_bcd>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2104      	movs	r1, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f8f1 	bl	80007e4 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f926 	bl	8000858 <binary_to_bcd>
 800060c:	4603      	mov	r3, r0
 800060e:	2105      	movs	r1, #5
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f8e7 	bl	80007e4 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f91c 	bl	8000858 <binary_to_bcd>
 8000620:	4603      	mov	r3, r0
 8000622:	2106      	movs	r1, #6
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f8dd 	bl	80007e4 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	78db      	ldrb	r3, [r3, #3]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f912 	bl	8000858 <binary_to_bcd>
 8000634:	4603      	mov	r3, r0
 8000636:	2103      	movs	r1, #3
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f8d3 	bl	80007e4 <ds1307_write>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <ds1307_get_current_time>:


void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f8e4 	bl	800081c <ds1307_read>
 8000654:	4603      	mov	r3, r0
 8000656:	73bb      	strb	r3, [r7, #14]

	seconds &= ~(1 << 7);
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800065e:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000660:	7bbb      	ldrb	r3, [r7, #14]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f924 	bl	80008b0 <bcd_to_binary>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000670:	2001      	movs	r0, #1
 8000672:	f000 f8d3 	bl	800081c <ds1307_read>
 8000676:	4603      	mov	r3, r0
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f919 	bl	80008b0 <bcd_to_binary>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000686:	2002      	movs	r0, #2
 8000688:	f000 f8c8 	bl	800081c <ds1307_read>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1 << 6))
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00f      	beq.n	80006ba <ds1307_get_current_time+0x74>
	{
		//12 hrs format
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	f003 0320 	and.w	r3, r3, #32
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	bf14      	ite	ne
 80006a4:	2301      	movne	r3, #1
 80006a6:	2300      	moveq	r3, #0
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);		//clear 5 & 6 bit
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e002      	b.n	80006c0 <ds1307_get_current_time+0x7a>

	}else
	{
		//24 hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2202      	movs	r2, #2
 80006be:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f8f4 	bl	80008b0 <bcd_to_binary>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	709a      	strb	r2, [r3, #2]
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <ds1307_get_current_date>:


void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	rtc_date->day 	= bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f89b 	bl	800081c <ds1307_read>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f8e1 	bl	80008b0 <bcd_to_binary>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	70da      	strb	r2, [r3, #3]
	rtc_date->date 	= bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80006f6:	2004      	movs	r0, #4
 80006f8:	f000 f890 	bl	800081c <ds1307_read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f8d6 	bl	80008b0 <bcd_to_binary>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 800070c:	2005      	movs	r0, #5
 800070e:	f000 f885 	bl	800081c <ds1307_read>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f8cb 	bl	80008b0 <bcd_to_binary>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	705a      	strb	r2, [r3, #1]
	rtc_date->year 	= bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000722:	2006      	movs	r0, #6
 8000724:	f000 f87a 	bl	800081c <ds1307_read>
 8000728:	4603      	mov	r3, r0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8c0 	bl	80008b0 <bcd_to_binary>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	709a      	strb	r2, [r3, #2]
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <ds1307_i2c_pin_config>:


static void ds1307_i2c_pin_config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	220c      	movs	r2, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fe22 	bl	8001398 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000754:	463b      	mov	r3, r7
 8000756:	220c      	movs	r2, #12
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fe1c 	bl	8001398 <memset>
	/*
	 * I2C1_SCL ----> PB6
	 * I2C1_SDA ----> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <ds1307_i2c_pin_config+0x74>)
 8000762:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000768:	2302      	movs	r3, #2
 800076a:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 800076c:	2307      	movs	r3, #7
 800076e:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000770:	2301      	movs	r3, #1
 8000772:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000774:	2301      	movs	r3, #1
 8000776:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000778:	2302      	movs	r3, #2
 800077a:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f955 	bl	8000a30 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <ds1307_i2c_pin_config+0x74>)
 8000788:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800078a:	2304      	movs	r3, #4
 800078c:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800078e:	2302      	movs	r3, #2
 8000790:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000792:	2306      	movs	r3, #6
 8000794:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000796:	2301      	movs	r3, #1
 8000798:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800079a:	2301      	movs	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800079e:	2302      	movs	r3, #2
 80007a0:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 80007a2:	463b      	mov	r3, r7
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f943 	bl	8000a30 <GPIO_Init>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020400 	.word	0x40020400

080007b8 <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	g_ds1307i2cHandle.pI2Cx = DS1307_I2C;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <ds1307_i2c_config+0x20>)
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <ds1307_i2c_config+0x24>)
 80007c0:	601a      	str	r2, [r3, #0]
	g_ds1307i2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <ds1307_i2c_config+0x20>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	725a      	strb	r2, [r3, #9]
	g_ds1307i2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <ds1307_i2c_config+0x20>)
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <ds1307_i2c_config+0x28>)
 80007cc:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307i2cHandle);
 80007ce:	4802      	ldr	r0, [pc, #8]	; (80007d8 <ds1307_i2c_config+0x20>)
 80007d0:	f000 fb8c 	bl	8000eec <I2C_Init>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000b8 	.word	0x200000b8
 80007dc:	40005400 	.word	0x40005400
 80007e0:	000186a0 	.word	0x000186a0

080007e4 <ds1307_write>:

static void ds1307_write(uint8_t value, uint8_t reg_addr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307i2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80007fc:	f107 010c 	add.w	r1, r7, #12
 8000800:	2300      	movs	r3, #0
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2368      	movs	r3, #104	; 0x68
 8000806:	2202      	movs	r2, #2
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <ds1307_write+0x34>)
 800080a:	f000 fc33 	bl	8001074 <I2C_MasterSendData>

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000b8 	.word	0x200000b8

0800081c <ds1307_read>:


static uint8_t ds1307_read(uint8_t reg_addr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	I2C_MasterSendData(&g_ds1307i2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000826:	1df9      	adds	r1, r7, #7
 8000828:	2300      	movs	r3, #0
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2368      	movs	r3, #104	; 0x68
 800082e:	2201      	movs	r2, #1
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <ds1307_read+0x38>)
 8000832:	f000 fc1f 	bl	8001074 <I2C_MasterSendData>
	I2C_MasterReveiveData(&g_ds1307i2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000836:	f107 010f 	add.w	r1, r7, #15
 800083a:	2300      	movs	r3, #0
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2368      	movs	r3, #104	; 0x68
 8000840:	2201      	movs	r2, #1
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <ds1307_read+0x38>)
 8000844:	f000 fc79 	bl	800113a <I2C_MasterReveiveData>

	return data;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000b8 	.word	0x200000b8

08000858 <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t bcd;

	bcd = value;
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b09      	cmp	r3, #9
 800086a:	d918      	bls.n	800089e <binary_to_bcd+0x46>
	{
		m 	= value / 10;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <binary_to_bcd+0x54>)
 8000870:	fba2 2303 	umull	r2, r3, r2, r3
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	73bb      	strb	r3, [r7, #14]
		n 	= value % 10;
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <binary_to_bcd+0x54>)
 800087c:	fba3 1302 	umull	r1, r3, r3, r2
 8000880:	08d9      	lsrs	r1, r3, #3
 8000882:	460b      	mov	r3, r1
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n;
 800088e:	7bbb      	ldrb	r3, [r7, #14]
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	b25a      	sxtb	r2, r3
 8000894:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000898:	4313      	orrs	r3, r2
 800089a:	b25b      	sxtb	r3, r3
 800089c:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 800089e:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	cccccccd 	.word	0xcccccccd

080008b0 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	m = (uint8_t)((value >> 4) * 100);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	461a      	mov	r2, r3
 80008c8:	0091      	lsls	r1, r2, #2
 80008ca:	461a      	mov	r2, r3
 80008cc:	460b      	mov	r3, r1
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 80008dc:	7bfa      	ldrb	r2, [r7, #15]
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	4413      	add	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <GPIO_PeriClockControl>:
 *
 * @note			- none
 *
 **********************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d141      	bne.n	8000986 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a43      	ldr	r2, [pc, #268]	; (8000a14 <GPIO_PeriClockControl+0x124>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d106      	bne.n	8000918 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800090a:	4b43      	ldr	r3, [pc, #268]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a42      	ldr	r2, [pc, #264]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000916:	e077      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a40      	ldr	r2, [pc, #256]	; (8000a1c <GPIO_PeriClockControl+0x12c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d106      	bne.n	800092e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000920:	4b3d      	ldr	r3, [pc, #244]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a3c      	ldr	r2, [pc, #240]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092c:	e06c      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a3b      	ldr	r2, [pc, #236]	; (8000a20 <GPIO_PeriClockControl+0x130>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d106      	bne.n	8000944 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000942:	e061      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a37      	ldr	r2, [pc, #220]	; (8000a24 <GPIO_PeriClockControl+0x134>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d106      	bne.n	800095a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800094c:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a31      	ldr	r2, [pc, #196]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000958:	e056      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a32      	ldr	r2, [pc, #200]	; (8000a28 <GPIO_PeriClockControl+0x138>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d106      	bne.n	8000970 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a2c      	ldr	r2, [pc, #176]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800096e:	e04b      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a2e      	ldr	r2, [pc, #184]	; (8000a2c <GPIO_PeriClockControl+0x13c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d147      	bne.n	8000a08 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 800097e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000984:	e040      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <GPIO_PeriClockControl+0x124>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
}
 800099a:	e035      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <GPIO_PeriClockControl+0x12c>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d106      	bne.n	80009b2 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009aa:	f023 0302 	bic.w	r3, r3, #2
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b0:	e02a      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <GPIO_PeriClockControl+0x130>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009c0:	f023 0304 	bic.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c6:	e01f      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <GPIO_PeriClockControl+0x134>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d106      	bne.n	80009de <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009d6:	f023 0308 	bic.w	r3, r3, #8
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009dc:	e014      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <GPIO_PeriClockControl+0x138>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d106      	bne.n	80009f4 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009ec:	f023 0310 	bic.w	r3, r3, #16
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009f2:	e009      	b.n	8000a08 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <GPIO_PeriClockControl+0x13c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d105      	bne.n	8000a08 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <GPIO_PeriClockControl+0x128>)
 8000a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40021c00 	.word	0x40021c00

08000a30 <GPIO_Init>:
 *
 * @note			-
 *
 **********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;		//temp.register
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

	//enabling the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff54 	bl	80008f0 <GPIO_PeriClockControl>


	//1. Configure the mode of the GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	795b      	ldrb	r3, [r3, #5]
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d81f      	bhi.n	8000a90 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	795b      	ldrb	r3, [r3, #5]
 8000a54:	461a      	mov	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	791b      	ldrb	r3, [r3, #4]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//clearing
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	2303      	movs	r3, #3
 8000a70:	408b      	lsls	r3, r1
 8000a72:	43db      	mvns	r3, r3
 8000a74:	4619      	mov	r1, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	e0a1      	b.n	8000bd4 <GPIO_Init+0x1a4>

	}else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	795b      	ldrb	r3, [r3, #5]
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d117      	bne.n	8000ac8 <GPIO_Init+0x98>
		{
			//configure FTSR
			EXTI->FTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a98:	4b9d      	ldr	r3, [pc, #628]	; (8000d10 <GPIO_Init+0x2e0>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	7912      	ldrb	r2, [r2, #4]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	408a      	lsls	r2, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a99      	ldr	r2, [pc, #612]	; (8000d10 <GPIO_Init+0x2e0>)
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	60d3      	str	r3, [r2, #12]
			//clearing the corresponding RTSR bit
			EXTI->RTSR 	&= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aae:	4b98      	ldr	r3, [pc, #608]	; (8000d10 <GPIO_Init+0x2e0>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	7912      	ldrb	r2, [r2, #4]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	2201      	movs	r2, #1
 8000aba:	408a      	lsls	r2, r1
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a93      	ldr	r2, [pc, #588]	; (8000d10 <GPIO_Init+0x2e0>)
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	6093      	str	r3, [r2, #8]
 8000ac6:	e035      	b.n	8000b34 <GPIO_Init+0x104>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	795b      	ldrb	r3, [r3, #5]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d117      	bne.n	8000b00 <GPIO_Init+0xd0>
		{
			//configure RTSR
			EXTI->RTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ad0:	4b8f      	ldr	r3, [pc, #572]	; (8000d10 <GPIO_Init+0x2e0>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	7912      	ldrb	r2, [r2, #4]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	408a      	lsls	r2, r1
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4a8b      	ldr	r2, [pc, #556]	; (8000d10 <GPIO_Init+0x2e0>)
 8000ae2:	430b      	orrs	r3, r1
 8000ae4:	6093      	str	r3, [r2, #8]
			//clearing the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae6:	4b8a      	ldr	r3, [pc, #552]	; (8000d10 <GPIO_Init+0x2e0>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	7912      	ldrb	r2, [r2, #4]
 8000aee:	4611      	mov	r1, r2
 8000af0:	2201      	movs	r2, #1
 8000af2:	408a      	lsls	r2, r1
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	4611      	mov	r1, r2
 8000af8:	4a85      	ldr	r2, [pc, #532]	; (8000d10 <GPIO_Init+0x2e0>)
 8000afa:	400b      	ands	r3, r1
 8000afc:	60d3      	str	r3, [r2, #12]
 8000afe:	e019      	b.n	8000b34 <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	d115      	bne.n	8000b34 <GPIO_Init+0x104>
		{
			//configure both FTSR and RTSR
			EXTI->FTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b08:	4b81      	ldr	r3, [pc, #516]	; (8000d10 <GPIO_Init+0x2e0>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	7912      	ldrb	r2, [r2, #4]
 8000b10:	4611      	mov	r1, r2
 8000b12:	2201      	movs	r2, #1
 8000b14:	408a      	lsls	r2, r1
 8000b16:	4611      	mov	r1, r2
 8000b18:	4a7d      	ldr	r2, [pc, #500]	; (8000d10 <GPIO_Init+0x2e0>)
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR 	|= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b1e:	4b7c      	ldr	r3, [pc, #496]	; (8000d10 <GPIO_Init+0x2e0>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	7912      	ldrb	r2, [r2, #4]
 8000b26:	4611      	mov	r1, r2
 8000b28:	2201      	movs	r2, #1
 8000b2a:	408a      	lsls	r2, r1
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4a78      	ldr	r2, [pc, #480]	; (8000d10 <GPIO_Init+0x2e0>)
 8000b30:	430b      	orrs	r3, r1
 8000b32:	6093      	str	r3, [r2, #8]
		}

		//configuring the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 	= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	791b      	ldrb	r3, [r3, #4]
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2	= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a72      	ldr	r2, [pc, #456]	; (8000d14 <GPIO_Init+0x2e4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d024      	beq.n	8000b9a <GPIO_Init+0x16a>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a70      	ldr	r2, [pc, #448]	; (8000d18 <GPIO_Init+0x2e8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d01d      	beq.n	8000b96 <GPIO_Init+0x166>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a6f      	ldr	r2, [pc, #444]	; (8000d1c <GPIO_Init+0x2ec>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d016      	beq.n	8000b92 <GPIO_Init+0x162>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a6d      	ldr	r2, [pc, #436]	; (8000d20 <GPIO_Init+0x2f0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00f      	beq.n	8000b8e <GPIO_Init+0x15e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a6c      	ldr	r2, [pc, #432]	; (8000d24 <GPIO_Init+0x2f4>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d008      	beq.n	8000b8a <GPIO_Init+0x15a>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a6a      	ldr	r2, [pc, #424]	; (8000d28 <GPIO_Init+0x2f8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <GPIO_Init+0x156>
 8000b82:	2305      	movs	r3, #5
 8000b84:	e00a      	b.n	8000b9c <GPIO_Init+0x16c>
 8000b86:	2300      	movs	r3, #0
 8000b88:	e008      	b.n	8000b9c <GPIO_Init+0x16c>
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	e006      	b.n	8000b9c <GPIO_Init+0x16c>
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e004      	b.n	8000b9c <GPIO_Init+0x16c>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e002      	b.n	8000b9c <GPIO_Init+0x16c>
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <GPIO_Init+0x16c>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	747b      	strb	r3, [r7, #17]
		//enabling SYSCFG clk
		SYSCFG_PCLK_EN();
 8000b9e:	4b63      	ldr	r3, [pc, #396]	; (8000d2c <GPIO_Init+0x2fc>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a62      	ldr	r2, [pc, #392]	; (8000d2c <GPIO_Init+0x2fc>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000baa:	7c7a      	ldrb	r2, [r7, #17]
 8000bac:	7cbb      	ldrb	r3, [r7, #18]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	fa02 f103 	lsl.w	r1, r2, r3
 8000bb4:	4a5e      	ldr	r2, [pc, #376]	; (8000d30 <GPIO_Init+0x300>)
 8000bb6:	7cfb      	ldrb	r3, [r7, #19]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bbe:	4b54      	ldr	r3, [pc, #336]	; (8000d10 <GPIO_Init+0x2e0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7912      	ldrb	r2, [r2, #4]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	2201      	movs	r2, #1
 8000bca:	408a      	lsls	r2, r1
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4a50      	ldr	r2, [pc, #320]	; (8000d10 <GPIO_Init+0x2e0>)
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	799b      	ldrb	r3, [r3, #6]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	400a      	ands	r2, r1
 8000c04:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//setting
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6899      	ldr	r1, [r3, #8]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	430a      	orrs	r2, r1
 8000c14:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]

	//3. COnfigure the PuPd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	79db      	ldrb	r3, [r3, #7]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR 	&= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	791b      	ldrb	r3, [r3, #4]
 8000c36:	4619      	mov	r1, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	408b      	lsls	r3, r1
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	4619      	mov	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	400a      	ands	r2, r1
 8000c46:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR 	|= temp;	//setting
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68d9      	ldr	r1, [r3, #12]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
	//4. Configure the OpType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7a1b      	ldrb	r3, [r3, #8]
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	791b      	ldrb	r3, [r3, #4]
 8000c76:	4619      	mov	r1, r3
 8000c78:	2301      	movs	r3, #1
 8000c7a:	408b      	lsls	r3, r1
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4619      	mov	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	400a      	ands	r2, r1
 8000c86:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	//setting
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6859      	ldr	r1, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

	//5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	795b      	ldrb	r3, [r3, #5]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d131      	bne.n	8000d08 <GPIO_Init+0x2d8>
	{
		//configure the alt function register
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));	//clearing
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	7c3a      	ldrb	r2, [r7, #16]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	7c3a      	ldrb	r2, [r7, #16]
 8000cd6:	4001      	ands	r1, r0
 8000cd8:	3208      	adds	r2, #8
 8000cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	7c3a      	ldrb	r2, [r7, #16]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7a5b      	ldrb	r3, [r3, #9]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	7c3a      	ldrb	r2, [r7, #16]
 8000d00:	4301      	orrs	r1, r0
 8000d02:	3208      	adds	r2, #8
 8000d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40013c00 	.word	0x40013c00
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020c00 	.word	0x40020c00
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40021c00 	.word	0x40021c00
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40013800 	.word	0x40013800

08000d34 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	601a      	str	r2, [r3, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr 	= SlaveAddr << 1;
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	70fb      	strb	r3, [r7, #3]
	SlaveAddr 	&= ~(1);		//SlaveAddr is Slave Address + r/nw bit = 0
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	f023 0301 	bic.w	r3, r3, #1
 8000d8c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR	= SlaveAddr;
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	611a      	str	r2, [r3, #16]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr 	= SlaveAddr << 1;
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr 	|= 1;			//SlaveAddr is Slave Address + r/nw bit = 1
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR	= SlaveAddr;
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	611a      	str	r2, [r3, #16]

}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	//Check for device Mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d01f      	beq.n	8000e22 <I2C_ClearADDRFlag+0x56>
	{
		//device is in Master Mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7f1b      	ldrb	r3, [r3, #28]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d112      	bne.n	8000e10 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d11f      	bne.n	8000e32 <I2C_ClearADDRFlag+0x66>
			{
				//First disable ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fa2c 	bl	8001256 <I2C_ManageAcking>

				//Clear the ADDR flag( read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}

}
 8000e0e:	e010      	b.n	8000e32 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	60fb      	str	r3, [r7, #12]
}
 8000e20:	e007      	b.n	8000e32 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	60fb      	str	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <I2C_PeriClockControl>:
 *
 * @note			- n/a
 *
 **********************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d120      	bne.n	8000e90 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a22      	ldr	r2, [pc, #136]	; (8000edc <I2C_PeriClockControl+0xa0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d106      	bne.n	8000e64 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
			I2C3_PCLK_DI();

		}
	}

}
 8000e62:	e035      	b.n	8000ed0 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <I2C_PeriClockControl+0xa8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d106      	bne.n	8000e7a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e78:	e02a      	b.n	8000ed0 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <I2C_PeriClockControl+0xac>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d126      	bne.n	8000ed0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e8e:	e01f      	b.n	8000ed0 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <I2C_PeriClockControl+0xa0>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d106      	bne.n	8000ea6 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ea2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ea4:	e014      	b.n	8000ed0 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <I2C_PeriClockControl+0xa8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d106      	bne.n	8000ebc <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000eb4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eba:	e009      	b.n	8000ed0 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <I2C_PeriClockControl+0xac>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d105      	bne.n	8000ed0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <I2C_PeriClockControl+0xa4>)
 8000eca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ece:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40005800 	.word	0x40005800
 8000ee8:	40005c00 	.word	0x40005c00

08000eec <I2C_Init>:
 *
 * @note			- n/a
 *
 **********************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]

	//enabling the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2101      	movs	r1, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff9c 	bl	8000e3c <I2C_PeriClockControl>

	//ACK control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7a5b      	ldrb	r3, [r3, #9]
 8000f08:	029b      	lsls	r3, r3, #10
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value()/1000000U;
 8000f1e:	f000 f9b7 	bl	8001290 <RCC_GetPCLK1Value>
 8000f22:	4602      	mov	r2, r0
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <I2C_Init+0x154>)
 8000f26:	fba3 2302 	umull	r2, r3, r3, r2
 8000f2a:	0c9b      	lsrs	r3, r3, #18
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f3c:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a1b      	ldrb	r3, [r3, #8]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	461a      	mov	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	609a      	str	r2, [r3, #8]

	//CCR calculation
	uint16_t ccr_value = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed < I2C_SCL_SPEED_SM)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4a36      	ldr	r2, [pc, #216]	; (8001044 <I2C_Init+0x158>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d80f      	bhi.n	8000f8e <I2C_Init+0xa2>
	{
		//mode is standard
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000f6e:	f000 f98f 	bl	8001290 <RCC_GetPCLK1Value>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	817b      	strh	r3, [r7, #10]
		tempreg  |= (ccr_value & 0xFFF);
 8000f80:	897b      	ldrh	r3, [r7, #10]
 8000f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e02d      	b.n	8000fea <I2C_Init+0xfe>

	}else
	{
		//mode is fast
		tempreg |= (1 << 15);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f94:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7a9b      	ldrb	r3, [r3, #10]
 8000f9a:	039b      	lsls	r3, r3, #14
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7a9b      	ldrb	r3, [r3, #10]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <I2C_Init+0xd8>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000fac:	f000 f970 	bl	8001290 <RCC_GetPCLK1Value>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc0:	817b      	strh	r3, [r7, #10]
 8000fc2:	e00c      	b.n	8000fde <I2C_Init+0xf2>

		}else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000fc4:	f000 f964 	bl	8001290 <RCC_GetPCLK1Value>
 8000fc8:	4601      	mov	r1, r0
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009a      	lsls	r2, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fdc:	817b      	strh	r3, [r7, #10]
		}
		tempreg  |= (ccr_value & 0xFFF);
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	61da      	str	r2, [r3, #28]

	//TRISE configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed < I2C_SCL_SPEED_SM)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <I2C_Init+0x158>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d809      	bhi.n	8001010 <I2C_Init+0x124>
		{
			//mode is standard

		tempreg = (RCC_GetPCLK1Value()/ 1000000U) + 1; 	//i.e from specification I2C TRISE register
 8000ffc:	f000 f948 	bl	8001290 <RCC_GetPCLK1Value>
 8001000:	4602      	mov	r2, r0
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <I2C_Init+0x154>)
 8001004:	fba3 2302 	umull	r2, r3, r3, r2
 8001008:	0c9b      	lsrs	r3, r3, #18
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e00d      	b.n	800102c <I2C_Init+0x140>

		}else
		{
			//mode is fast
			tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;		//i.e 1ns
 8001010:	f000 f93e 	bl	8001290 <RCC_GetPCLK1Value>
 8001014:	4602      	mov	r2, r0
 8001016:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800101a:	fb03 f302 	mul.w	r3, r3, r2
 800101e:	0a5b      	lsrs	r3, r3, #9
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <I2C_Init+0x15c>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	09db      	lsrs	r3, r3, #7
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
		}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001036:	621a      	str	r2, [r3, #32]
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	431bde83 	.word	0x431bde83
 8001044:	0001869f 	.word	0x0001869f
 8001048:	00044b83 	.word	0x00044b83

0800104c <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <I2C_MasterSendData>:
 *
 * @note			- n/a
 *
 **********************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	70fb      	strb	r3, [r7, #3]
	//1.Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe54 	bl	8000d34 <I2C_GenerateStartCondition>

	//2.Confirm that start generation is completed by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched i.e pulled to LOW.
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 800108c:	bf00      	nop
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2101      	movs	r1, #1
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffd9 	bl	800104c <I2C_GetFlagStatus>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f6      	beq.n	800108e <I2C_MasterSendData+0x1a>

	//3.Send the address of the Slave with r/nw bit set to W(0) (total of 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe63 	bl	8000d74 <I2C_ExecuteAddressPhaseWrite>

	//4.Confirm that the address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 80010ae:	bf00      	nop
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2102      	movs	r1, #2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffc8 	bl	800104c <I2C_GetFlagStatus>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f6      	beq.n	80010b0 <I2C_MasterSendData+0x3c>

	//5.Clear the ADDR flag according to its software sequence
	//Note: Until ADDR is cleared SCL will be stretched i.e pulled to LOW
	I2C_ClearADDRFlag(pI2CHandle);
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff fe82 	bl	8000dcc <I2C_ClearADDRFlag>

	//6.Send data until Len becomes 0
	while(Len > 0)
 80010c8:	e014      	b.n	80010f4 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)); //wait till TxE is set
 80010ca:	bf00      	nop
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffba 	bl	800104c <I2C_GetFlagStatus>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f6      	beq.n	80010cc <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
		Len--;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1e7      	bne.n	80010ca <I2C_MasterSendData+0x56>

	//7.When Len becomes zero wait for TxE=1 and BTF=1 before generating STOP condition
	//  NOte: TXE = 1, BTF = 1, means that both SR and DR are empty and next transmissions
	//  should begin when BTF = 1. SCL will be stretched i.e pulled to LOW

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 80010fa:	bf00      	nop
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffa2 	bl	800104c <I2C_GetFlagStatus>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f6      	beq.n	80010fc <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 800110e:	bf00      	nop
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff98 	bl	800104c <I2C_GetFlagStatus>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f6      	beq.n	8001110 <I2C_MasterSendData+0x9c>


	//8.Generate STOP condition and master need not to wait for the completion of stop conditions.
	//	Note: Generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 8001122:	7e3b      	ldrb	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d104      	bne.n	8001132 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe11 	bl	8000d54 <I2C_GenerateStopCondition>

}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <I2C_MasterReveiveData>:
 *
 * @note			- n/a
 *
 **********************************************************************/
void I2C_MasterReveiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	70fb      	strb	r3, [r7, #3]
	//1.Generate the START conditions
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fdf1 	bl	8000d34 <I2C_GenerateStartCondition>

	//2.Confirm that start generation is completed by checking the SB flag in the SR1
	//Note: Until SB is cleared SCL will be stretched i.e pulled to LOW.
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8001152:	bf00      	nop
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff76 	bl	800104c <I2C_GetFlagStatus>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f6      	beq.n	8001154 <I2C_MasterReveiveData+0x1a>

	//3.Send the address of the Slave with r/nw bit set to R(1) (total of 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	78fa      	ldrb	r2, [r7, #3]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fe16 	bl	8000da0 <I2C_ExecuteAddressPhaseRead>

	//4.Confirm that the address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8001174:	bf00      	nop
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2102      	movs	r1, #2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff65 	bl	800104c <I2C_GetFlagStatus>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f6      	beq.n	8001176 <I2C_MasterReveiveData+0x3c>

	//procedure to read only one byte from Slave
	if(Len == 1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d121      	bne.n	80011d2 <I2C_MasterReveiveData+0x98>
	{
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f85e 	bl	8001256 <I2C_ManageAcking>

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff fe16 	bl	8000dcc <I2C_ClearADDRFlag>

		//Wait until RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 80011a0:	bf00      	nop
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff4f 	bl	800104c <I2C_GetFlagStatus>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f6      	beq.n	80011a2 <I2C_MasterReveiveData+0x68>

		//Generate STOP condition
		if(Sr == I2C_DISABLE_SR)
 80011b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d104      	bne.n	80011c6 <I2C_MasterReveiveData+0x8c>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fdc7 	bl	8000d54 <I2C_GenerateStopCondition>

		//Read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	701a      	strb	r2, [r3, #0]

	}

	if(Len > 1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d930      	bls.n	800123a <I2C_MasterReveiveData+0x100>
	{
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);		//data reception only begin after clearing ADDR
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fdf7 	bl	8000dcc <I2C_ClearADDRFlag>

		//read the data untill Len becomes zero
		for(uint32_t i = Len; i > 0; i--)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e027      	b.n	8001234 <I2C_MasterReveiveData+0xfa>
		{
			//wait until the RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE));
 80011e4:	bf00      	nop
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff2d 	bl	800104c <I2C_GetFlagStatus>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f6      	beq.n	80011e6 <I2C_MasterReveiveData+0xac>

			if(i == 2) 	//if last 2 bits remaining
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d10e      	bne.n	800121c <I2C_MasterReveiveData+0xe2>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f826 	bl	8001256 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR)
 800120a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <I2C_MasterReveiveData+0xe2>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd9c 	bl	8000d54 <I2C_GenerateStopCondition>
			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3301      	adds	r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3b01      	subs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1d4      	bne.n	80011e4 <I2C_MasterReveiveData+0xaa>

		}
	}

	//re-enabling ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	7a5b      	ldrb	r3, [r3, #9]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <I2C_MasterReveiveData+0x114>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f804 	bl	8001256 <I2C_ManageAcking>
	}
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <I2C_ManageAcking>:



void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d106      	bne.n	8001276 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	601a      	str	r2, [r3, #0]
	{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}

}
 8001274:	e005      	b.n	8001282 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <RCC_GetPCLK1Value>:
 * @return            -
 *
 * @Note              -
 ********************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc,temp,ahbp,apb1;

	clksrc = (RCC->CFGR >> 2) &  0x3;			//bring those 2 bits to LSB position and mask
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <RCC_GetPCLK1Value+0x9c>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 80012a4:	7a7b      	ldrb	r3, [r7, #9]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;					//HSI is 16Mhz
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <RCC_GetPCLK1Value+0xa0>)
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e00b      	b.n	80012c8 <RCC_GetPCLK1Value+0x38>

	}else if(clksrc == 1)
 80012b0:	7a7b      	ldrb	r3, [r7, #9]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d102      	bne.n	80012bc <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;					//HSE is 8Mhz
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <RCC_GetPCLK1Value+0xa4>)
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e005      	b.n	80012c8 <RCC_GetPCLK1Value+0x38>

	}else if(clksrc == 2)
 80012bc:	7a7b      	ldrb	r3, [r7, #9]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d102      	bne.n	80012c8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80012c2:	f000 f83d 	bl	8001340 <RCC_GetPLLOutputClock>
 80012c6:	60f8      	str	r0, [r7, #12]
	}

	//for AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <RCC_GetPCLK1Value+0x9c>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80012d6:	7a3b      	ldrb	r3, [r7, #8]
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d802      	bhi.n	80012e2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	72fb      	strb	r3, [r7, #11]
 80012e0:	e005      	b.n	80012ee <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	3b08      	subs	r3, #8
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <RCC_GetPCLK1Value+0xa8>)
 80012e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ec:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp = ((RCC->CFGR >> 10) & 0x7);
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <RCC_GetPCLK1Value+0x9c>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	0a9b      	lsrs	r3, r3, #10
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80012fc:	7a3b      	ldrb	r3, [r7, #8]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d802      	bhi.n	8001308 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8001302:	2301      	movs	r3, #1
 8001304:	72bb      	strb	r3, [r7, #10]
 8001306:	e004      	b.n	8001312 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1 = APB_PreScaler[temp-4];
 8001308:	7a3b      	ldrb	r3, [r7, #8]
 800130a:	3b04      	subs	r3, #4
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <RCC_GetPCLK1Value+0xac>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	fbb2 f2f3 	udiv	r2, r2, r3
 800131a:	7abb      	ldrb	r3, [r7, #10]
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001322:	687b      	ldr	r3, [r7, #4]

}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	00f42400 	.word	0x00f42400
 8001334:	007a1200 	.word	0x007a1200
 8001338:	20000000 	.word	0x20000000
 800133c:	20000010 	.word	0x20000010

08001340 <RCC_GetPLLOutputClock>:

}


uint32_t RCC_GetPLLOutputClock()
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <__libc_init_array>:
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	4e0d      	ldr	r6, [pc, #52]	; (8001388 <__libc_init_array+0x38>)
 8001354:	4c0d      	ldr	r4, [pc, #52]	; (800138c <__libc_init_array+0x3c>)
 8001356:	1ba4      	subs	r4, r4, r6
 8001358:	10a4      	asrs	r4, r4, #2
 800135a:	2500      	movs	r5, #0
 800135c:	42a5      	cmp	r5, r4
 800135e:	d109      	bne.n	8001374 <__libc_init_array+0x24>
 8001360:	4e0b      	ldr	r6, [pc, #44]	; (8001390 <__libc_init_array+0x40>)
 8001362:	4c0c      	ldr	r4, [pc, #48]	; (8001394 <__libc_init_array+0x44>)
 8001364:	f000 ffa6 	bl	80022b4 <_init>
 8001368:	1ba4      	subs	r4, r4, r6
 800136a:	10a4      	asrs	r4, r4, #2
 800136c:	2500      	movs	r5, #0
 800136e:	42a5      	cmp	r5, r4
 8001370:	d105      	bne.n	800137e <__libc_init_array+0x2e>
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001378:	4798      	blx	r3
 800137a:	3501      	adds	r5, #1
 800137c:	e7ee      	b.n	800135c <__libc_init_array+0xc>
 800137e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001382:	4798      	blx	r3
 8001384:	3501      	adds	r5, #1
 8001386:	e7f2      	b.n	800136e <__libc_init_array+0x1e>
 8001388:	08002430 	.word	0x08002430
 800138c:	08002430 	.word	0x08002430
 8001390:	08002430 	.word	0x08002430
 8001394:	08002434 	.word	0x08002434

08001398 <memset>:
 8001398:	4402      	add	r2, r0
 800139a:	4603      	mov	r3, r0
 800139c:	4293      	cmp	r3, r2
 800139e:	d100      	bne.n	80013a2 <memset+0xa>
 80013a0:	4770      	bx	lr
 80013a2:	f803 1b01 	strb.w	r1, [r3], #1
 80013a6:	e7f9      	b.n	800139c <memset+0x4>

080013a8 <iprintf>:
 80013a8:	b40f      	push	{r0, r1, r2, r3}
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <iprintf+0x2c>)
 80013ac:	b513      	push	{r0, r1, r4, lr}
 80013ae:	681c      	ldr	r4, [r3, #0]
 80013b0:	b124      	cbz	r4, 80013bc <iprintf+0x14>
 80013b2:	69a3      	ldr	r3, [r4, #24]
 80013b4:	b913      	cbnz	r3, 80013bc <iprintf+0x14>
 80013b6:	4620      	mov	r0, r4
 80013b8:	f000 fa22 	bl	8001800 <__sinit>
 80013bc:	ab05      	add	r3, sp, #20
 80013be:	9a04      	ldr	r2, [sp, #16]
 80013c0:	68a1      	ldr	r1, [r4, #8]
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	4620      	mov	r0, r4
 80013c6:	f000 fbdb 	bl	8001b80 <_vfiprintf_r>
 80013ca:	b002      	add	sp, #8
 80013cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013d0:	b004      	add	sp, #16
 80013d2:	4770      	bx	lr
 80013d4:	20000014 	.word	0x20000014

080013d8 <_puts_r>:
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	460e      	mov	r6, r1
 80013dc:	4605      	mov	r5, r0
 80013de:	b118      	cbz	r0, 80013e8 <_puts_r+0x10>
 80013e0:	6983      	ldr	r3, [r0, #24]
 80013e2:	b90b      	cbnz	r3, 80013e8 <_puts_r+0x10>
 80013e4:	f000 fa0c 	bl	8001800 <__sinit>
 80013e8:	69ab      	ldr	r3, [r5, #24]
 80013ea:	68ac      	ldr	r4, [r5, #8]
 80013ec:	b913      	cbnz	r3, 80013f4 <_puts_r+0x1c>
 80013ee:	4628      	mov	r0, r5
 80013f0:	f000 fa06 	bl	8001800 <__sinit>
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <_puts_r+0xac>)
 80013f6:	429c      	cmp	r4, r3
 80013f8:	d117      	bne.n	800142a <_puts_r+0x52>
 80013fa:	686c      	ldr	r4, [r5, #4]
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	071b      	lsls	r3, r3, #28
 8001400:	d51d      	bpl.n	800143e <_puts_r+0x66>
 8001402:	6923      	ldr	r3, [r4, #16]
 8001404:	b1db      	cbz	r3, 800143e <_puts_r+0x66>
 8001406:	3e01      	subs	r6, #1
 8001408:	68a3      	ldr	r3, [r4, #8]
 800140a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800140e:	3b01      	subs	r3, #1
 8001410:	60a3      	str	r3, [r4, #8]
 8001412:	b9e9      	cbnz	r1, 8001450 <_puts_r+0x78>
 8001414:	2b00      	cmp	r3, #0
 8001416:	da2e      	bge.n	8001476 <_puts_r+0x9e>
 8001418:	4622      	mov	r2, r4
 800141a:	210a      	movs	r1, #10
 800141c:	4628      	mov	r0, r5
 800141e:	f000 f83f 	bl	80014a0 <__swbuf_r>
 8001422:	3001      	adds	r0, #1
 8001424:	d011      	beq.n	800144a <_puts_r+0x72>
 8001426:	200a      	movs	r0, #10
 8001428:	e011      	b.n	800144e <_puts_r+0x76>
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <_puts_r+0xb0>)
 800142c:	429c      	cmp	r4, r3
 800142e:	d101      	bne.n	8001434 <_puts_r+0x5c>
 8001430:	68ac      	ldr	r4, [r5, #8]
 8001432:	e7e3      	b.n	80013fc <_puts_r+0x24>
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <_puts_r+0xb4>)
 8001436:	429c      	cmp	r4, r3
 8001438:	bf08      	it	eq
 800143a:	68ec      	ldreq	r4, [r5, #12]
 800143c:	e7de      	b.n	80013fc <_puts_r+0x24>
 800143e:	4621      	mov	r1, r4
 8001440:	4628      	mov	r0, r5
 8001442:	f000 f87f 	bl	8001544 <__swsetup_r>
 8001446:	2800      	cmp	r0, #0
 8001448:	d0dd      	beq.n	8001406 <_puts_r+0x2e>
 800144a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800144e:	bd70      	pop	{r4, r5, r6, pc}
 8001450:	2b00      	cmp	r3, #0
 8001452:	da04      	bge.n	800145e <_puts_r+0x86>
 8001454:	69a2      	ldr	r2, [r4, #24]
 8001456:	429a      	cmp	r2, r3
 8001458:	dc06      	bgt.n	8001468 <_puts_r+0x90>
 800145a:	290a      	cmp	r1, #10
 800145c:	d004      	beq.n	8001468 <_puts_r+0x90>
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	6022      	str	r2, [r4, #0]
 8001464:	7019      	strb	r1, [r3, #0]
 8001466:	e7cf      	b.n	8001408 <_puts_r+0x30>
 8001468:	4622      	mov	r2, r4
 800146a:	4628      	mov	r0, r5
 800146c:	f000 f818 	bl	80014a0 <__swbuf_r>
 8001470:	3001      	adds	r0, #1
 8001472:	d1c9      	bne.n	8001408 <_puts_r+0x30>
 8001474:	e7e9      	b.n	800144a <_puts_r+0x72>
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	200a      	movs	r0, #10
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	6022      	str	r2, [r4, #0]
 800147e:	7018      	strb	r0, [r3, #0]
 8001480:	e7e5      	b.n	800144e <_puts_r+0x76>
 8001482:	bf00      	nop
 8001484:	080023bc 	.word	0x080023bc
 8001488:	080023dc 	.word	0x080023dc
 800148c:	0800239c 	.word	0x0800239c

08001490 <puts>:
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <puts+0xc>)
 8001492:	4601      	mov	r1, r0
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	f7ff bf9f 	b.w	80013d8 <_puts_r>
 800149a:	bf00      	nop
 800149c:	20000014 	.word	0x20000014

080014a0 <__swbuf_r>:
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a2:	460e      	mov	r6, r1
 80014a4:	4614      	mov	r4, r2
 80014a6:	4605      	mov	r5, r0
 80014a8:	b118      	cbz	r0, 80014b2 <__swbuf_r+0x12>
 80014aa:	6983      	ldr	r3, [r0, #24]
 80014ac:	b90b      	cbnz	r3, 80014b2 <__swbuf_r+0x12>
 80014ae:	f000 f9a7 	bl	8001800 <__sinit>
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <__swbuf_r+0x98>)
 80014b4:	429c      	cmp	r4, r3
 80014b6:	d12a      	bne.n	800150e <__swbuf_r+0x6e>
 80014b8:	686c      	ldr	r4, [r5, #4]
 80014ba:	69a3      	ldr	r3, [r4, #24]
 80014bc:	60a3      	str	r3, [r4, #8]
 80014be:	89a3      	ldrh	r3, [r4, #12]
 80014c0:	071a      	lsls	r2, r3, #28
 80014c2:	d52e      	bpl.n	8001522 <__swbuf_r+0x82>
 80014c4:	6923      	ldr	r3, [r4, #16]
 80014c6:	b363      	cbz	r3, 8001522 <__swbuf_r+0x82>
 80014c8:	6923      	ldr	r3, [r4, #16]
 80014ca:	6820      	ldr	r0, [r4, #0]
 80014cc:	1ac0      	subs	r0, r0, r3
 80014ce:	6963      	ldr	r3, [r4, #20]
 80014d0:	b2f6      	uxtb	r6, r6
 80014d2:	4283      	cmp	r3, r0
 80014d4:	4637      	mov	r7, r6
 80014d6:	dc04      	bgt.n	80014e2 <__swbuf_r+0x42>
 80014d8:	4621      	mov	r1, r4
 80014da:	4628      	mov	r0, r5
 80014dc:	f000 f926 	bl	800172c <_fflush_r>
 80014e0:	bb28      	cbnz	r0, 800152e <__swbuf_r+0x8e>
 80014e2:	68a3      	ldr	r3, [r4, #8]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	60a3      	str	r3, [r4, #8]
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	6022      	str	r2, [r4, #0]
 80014ee:	701e      	strb	r6, [r3, #0]
 80014f0:	6963      	ldr	r3, [r4, #20]
 80014f2:	3001      	adds	r0, #1
 80014f4:	4283      	cmp	r3, r0
 80014f6:	d004      	beq.n	8001502 <__swbuf_r+0x62>
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	07db      	lsls	r3, r3, #31
 80014fc:	d519      	bpl.n	8001532 <__swbuf_r+0x92>
 80014fe:	2e0a      	cmp	r6, #10
 8001500:	d117      	bne.n	8001532 <__swbuf_r+0x92>
 8001502:	4621      	mov	r1, r4
 8001504:	4628      	mov	r0, r5
 8001506:	f000 f911 	bl	800172c <_fflush_r>
 800150a:	b190      	cbz	r0, 8001532 <__swbuf_r+0x92>
 800150c:	e00f      	b.n	800152e <__swbuf_r+0x8e>
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <__swbuf_r+0x9c>)
 8001510:	429c      	cmp	r4, r3
 8001512:	d101      	bne.n	8001518 <__swbuf_r+0x78>
 8001514:	68ac      	ldr	r4, [r5, #8]
 8001516:	e7d0      	b.n	80014ba <__swbuf_r+0x1a>
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <__swbuf_r+0xa0>)
 800151a:	429c      	cmp	r4, r3
 800151c:	bf08      	it	eq
 800151e:	68ec      	ldreq	r4, [r5, #12]
 8001520:	e7cb      	b.n	80014ba <__swbuf_r+0x1a>
 8001522:	4621      	mov	r1, r4
 8001524:	4628      	mov	r0, r5
 8001526:	f000 f80d 	bl	8001544 <__swsetup_r>
 800152a:	2800      	cmp	r0, #0
 800152c:	d0cc      	beq.n	80014c8 <__swbuf_r+0x28>
 800152e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001532:	4638      	mov	r0, r7
 8001534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001536:	bf00      	nop
 8001538:	080023bc 	.word	0x080023bc
 800153c:	080023dc 	.word	0x080023dc
 8001540:	0800239c 	.word	0x0800239c

08001544 <__swsetup_r>:
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <__swsetup_r+0xcc>)
 8001546:	b570      	push	{r4, r5, r6, lr}
 8001548:	681d      	ldr	r5, [r3, #0]
 800154a:	4606      	mov	r6, r0
 800154c:	460c      	mov	r4, r1
 800154e:	b125      	cbz	r5, 800155a <__swsetup_r+0x16>
 8001550:	69ab      	ldr	r3, [r5, #24]
 8001552:	b913      	cbnz	r3, 800155a <__swsetup_r+0x16>
 8001554:	4628      	mov	r0, r5
 8001556:	f000 f953 	bl	8001800 <__sinit>
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <__swsetup_r+0xd0>)
 800155c:	429c      	cmp	r4, r3
 800155e:	d10f      	bne.n	8001580 <__swsetup_r+0x3c>
 8001560:	686c      	ldr	r4, [r5, #4]
 8001562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001566:	b29a      	uxth	r2, r3
 8001568:	0715      	lsls	r5, r2, #28
 800156a:	d42c      	bmi.n	80015c6 <__swsetup_r+0x82>
 800156c:	06d0      	lsls	r0, r2, #27
 800156e:	d411      	bmi.n	8001594 <__swsetup_r+0x50>
 8001570:	2209      	movs	r2, #9
 8001572:	6032      	str	r2, [r6, #0]
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	81a3      	strh	r3, [r4, #12]
 800157a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800157e:	e03e      	b.n	80015fe <__swsetup_r+0xba>
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <__swsetup_r+0xd4>)
 8001582:	429c      	cmp	r4, r3
 8001584:	d101      	bne.n	800158a <__swsetup_r+0x46>
 8001586:	68ac      	ldr	r4, [r5, #8]
 8001588:	e7eb      	b.n	8001562 <__swsetup_r+0x1e>
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <__swsetup_r+0xd8>)
 800158c:	429c      	cmp	r4, r3
 800158e:	bf08      	it	eq
 8001590:	68ec      	ldreq	r4, [r5, #12]
 8001592:	e7e6      	b.n	8001562 <__swsetup_r+0x1e>
 8001594:	0751      	lsls	r1, r2, #29
 8001596:	d512      	bpl.n	80015be <__swsetup_r+0x7a>
 8001598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800159a:	b141      	cbz	r1, 80015ae <__swsetup_r+0x6a>
 800159c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015a0:	4299      	cmp	r1, r3
 80015a2:	d002      	beq.n	80015aa <__swsetup_r+0x66>
 80015a4:	4630      	mov	r0, r6
 80015a6:	f000 fa19 	bl	80019dc <_free_r>
 80015aa:	2300      	movs	r3, #0
 80015ac:	6363      	str	r3, [r4, #52]	; 0x34
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015b4:	81a3      	strh	r3, [r4, #12]
 80015b6:	2300      	movs	r3, #0
 80015b8:	6063      	str	r3, [r4, #4]
 80015ba:	6923      	ldr	r3, [r4, #16]
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	89a3      	ldrh	r3, [r4, #12]
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	81a3      	strh	r3, [r4, #12]
 80015c6:	6923      	ldr	r3, [r4, #16]
 80015c8:	b94b      	cbnz	r3, 80015de <__swsetup_r+0x9a>
 80015ca:	89a3      	ldrh	r3, [r4, #12]
 80015cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d4:	d003      	beq.n	80015de <__swsetup_r+0x9a>
 80015d6:	4621      	mov	r1, r4
 80015d8:	4630      	mov	r0, r6
 80015da:	f000 f9bf 	bl	800195c <__smakebuf_r>
 80015de:	89a2      	ldrh	r2, [r4, #12]
 80015e0:	f012 0301 	ands.w	r3, r2, #1
 80015e4:	d00c      	beq.n	8001600 <__swsetup_r+0xbc>
 80015e6:	2300      	movs	r3, #0
 80015e8:	60a3      	str	r3, [r4, #8]
 80015ea:	6963      	ldr	r3, [r4, #20]
 80015ec:	425b      	negs	r3, r3
 80015ee:	61a3      	str	r3, [r4, #24]
 80015f0:	6923      	ldr	r3, [r4, #16]
 80015f2:	b953      	cbnz	r3, 800160a <__swsetup_r+0xc6>
 80015f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80015fc:	d1ba      	bne.n	8001574 <__swsetup_r+0x30>
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
 8001600:	0792      	lsls	r2, r2, #30
 8001602:	bf58      	it	pl
 8001604:	6963      	ldrpl	r3, [r4, #20]
 8001606:	60a3      	str	r3, [r4, #8]
 8001608:	e7f2      	b.n	80015f0 <__swsetup_r+0xac>
 800160a:	2000      	movs	r0, #0
 800160c:	e7f7      	b.n	80015fe <__swsetup_r+0xba>
 800160e:	bf00      	nop
 8001610:	20000014 	.word	0x20000014
 8001614:	080023bc 	.word	0x080023bc
 8001618:	080023dc 	.word	0x080023dc
 800161c:	0800239c 	.word	0x0800239c

08001620 <__sflush_r>:
 8001620:	898a      	ldrh	r2, [r1, #12]
 8001622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001626:	4605      	mov	r5, r0
 8001628:	0710      	lsls	r0, r2, #28
 800162a:	460c      	mov	r4, r1
 800162c:	d458      	bmi.n	80016e0 <__sflush_r+0xc0>
 800162e:	684b      	ldr	r3, [r1, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	dc05      	bgt.n	8001640 <__sflush_r+0x20>
 8001634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	dc02      	bgt.n	8001640 <__sflush_r+0x20>
 800163a:	2000      	movs	r0, #0
 800163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001642:	2e00      	cmp	r6, #0
 8001644:	d0f9      	beq.n	800163a <__sflush_r+0x1a>
 8001646:	2300      	movs	r3, #0
 8001648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800164c:	682f      	ldr	r7, [r5, #0]
 800164e:	6a21      	ldr	r1, [r4, #32]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	d032      	beq.n	80016ba <__sflush_r+0x9a>
 8001654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001656:	89a3      	ldrh	r3, [r4, #12]
 8001658:	075a      	lsls	r2, r3, #29
 800165a:	d505      	bpl.n	8001668 <__sflush_r+0x48>
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	1ac0      	subs	r0, r0, r3
 8001660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001662:	b10b      	cbz	r3, 8001668 <__sflush_r+0x48>
 8001664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001666:	1ac0      	subs	r0, r0, r3
 8001668:	2300      	movs	r3, #0
 800166a:	4602      	mov	r2, r0
 800166c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800166e:	6a21      	ldr	r1, [r4, #32]
 8001670:	4628      	mov	r0, r5
 8001672:	47b0      	blx	r6
 8001674:	1c43      	adds	r3, r0, #1
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	d106      	bne.n	8001688 <__sflush_r+0x68>
 800167a:	6829      	ldr	r1, [r5, #0]
 800167c:	291d      	cmp	r1, #29
 800167e:	d848      	bhi.n	8001712 <__sflush_r+0xf2>
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <__sflush_r+0x108>)
 8001682:	40ca      	lsrs	r2, r1
 8001684:	07d6      	lsls	r6, r2, #31
 8001686:	d544      	bpl.n	8001712 <__sflush_r+0xf2>
 8001688:	2200      	movs	r2, #0
 800168a:	6062      	str	r2, [r4, #4]
 800168c:	04d9      	lsls	r1, r3, #19
 800168e:	6922      	ldr	r2, [r4, #16]
 8001690:	6022      	str	r2, [r4, #0]
 8001692:	d504      	bpl.n	800169e <__sflush_r+0x7e>
 8001694:	1c42      	adds	r2, r0, #1
 8001696:	d101      	bne.n	800169c <__sflush_r+0x7c>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	b903      	cbnz	r3, 800169e <__sflush_r+0x7e>
 800169c:	6560      	str	r0, [r4, #84]	; 0x54
 800169e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016a0:	602f      	str	r7, [r5, #0]
 80016a2:	2900      	cmp	r1, #0
 80016a4:	d0c9      	beq.n	800163a <__sflush_r+0x1a>
 80016a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016aa:	4299      	cmp	r1, r3
 80016ac:	d002      	beq.n	80016b4 <__sflush_r+0x94>
 80016ae:	4628      	mov	r0, r5
 80016b0:	f000 f994 	bl	80019dc <_free_r>
 80016b4:	2000      	movs	r0, #0
 80016b6:	6360      	str	r0, [r4, #52]	; 0x34
 80016b8:	e7c0      	b.n	800163c <__sflush_r+0x1c>
 80016ba:	2301      	movs	r3, #1
 80016bc:	4628      	mov	r0, r5
 80016be:	47b0      	blx	r6
 80016c0:	1c41      	adds	r1, r0, #1
 80016c2:	d1c8      	bne.n	8001656 <__sflush_r+0x36>
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0c5      	beq.n	8001656 <__sflush_r+0x36>
 80016ca:	2b1d      	cmp	r3, #29
 80016cc:	d001      	beq.n	80016d2 <__sflush_r+0xb2>
 80016ce:	2b16      	cmp	r3, #22
 80016d0:	d101      	bne.n	80016d6 <__sflush_r+0xb6>
 80016d2:	602f      	str	r7, [r5, #0]
 80016d4:	e7b1      	b.n	800163a <__sflush_r+0x1a>
 80016d6:	89a3      	ldrh	r3, [r4, #12]
 80016d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016dc:	81a3      	strh	r3, [r4, #12]
 80016de:	e7ad      	b.n	800163c <__sflush_r+0x1c>
 80016e0:	690f      	ldr	r7, [r1, #16]
 80016e2:	2f00      	cmp	r7, #0
 80016e4:	d0a9      	beq.n	800163a <__sflush_r+0x1a>
 80016e6:	0793      	lsls	r3, r2, #30
 80016e8:	680e      	ldr	r6, [r1, #0]
 80016ea:	bf08      	it	eq
 80016ec:	694b      	ldreq	r3, [r1, #20]
 80016ee:	600f      	str	r7, [r1, #0]
 80016f0:	bf18      	it	ne
 80016f2:	2300      	movne	r3, #0
 80016f4:	eba6 0807 	sub.w	r8, r6, r7
 80016f8:	608b      	str	r3, [r1, #8]
 80016fa:	f1b8 0f00 	cmp.w	r8, #0
 80016fe:	dd9c      	ble.n	800163a <__sflush_r+0x1a>
 8001700:	4643      	mov	r3, r8
 8001702:	463a      	mov	r2, r7
 8001704:	6a21      	ldr	r1, [r4, #32]
 8001706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001708:	4628      	mov	r0, r5
 800170a:	47b0      	blx	r6
 800170c:	2800      	cmp	r0, #0
 800170e:	dc06      	bgt.n	800171e <__sflush_r+0xfe>
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001716:	81a3      	strh	r3, [r4, #12]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800171c:	e78e      	b.n	800163c <__sflush_r+0x1c>
 800171e:	4407      	add	r7, r0
 8001720:	eba8 0800 	sub.w	r8, r8, r0
 8001724:	e7e9      	b.n	80016fa <__sflush_r+0xda>
 8001726:	bf00      	nop
 8001728:	20400001 	.word	0x20400001

0800172c <_fflush_r>:
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	690b      	ldr	r3, [r1, #16]
 8001730:	4605      	mov	r5, r0
 8001732:	460c      	mov	r4, r1
 8001734:	b1db      	cbz	r3, 800176e <_fflush_r+0x42>
 8001736:	b118      	cbz	r0, 8001740 <_fflush_r+0x14>
 8001738:	6983      	ldr	r3, [r0, #24]
 800173a:	b90b      	cbnz	r3, 8001740 <_fflush_r+0x14>
 800173c:	f000 f860 	bl	8001800 <__sinit>
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <_fflush_r+0x48>)
 8001742:	429c      	cmp	r4, r3
 8001744:	d109      	bne.n	800175a <_fflush_r+0x2e>
 8001746:	686c      	ldr	r4, [r5, #4]
 8001748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800174c:	b17b      	cbz	r3, 800176e <_fflush_r+0x42>
 800174e:	4621      	mov	r1, r4
 8001750:	4628      	mov	r0, r5
 8001752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001756:	f7ff bf63 	b.w	8001620 <__sflush_r>
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_fflush_r+0x4c>)
 800175c:	429c      	cmp	r4, r3
 800175e:	d101      	bne.n	8001764 <_fflush_r+0x38>
 8001760:	68ac      	ldr	r4, [r5, #8]
 8001762:	e7f1      	b.n	8001748 <_fflush_r+0x1c>
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <_fflush_r+0x50>)
 8001766:	429c      	cmp	r4, r3
 8001768:	bf08      	it	eq
 800176a:	68ec      	ldreq	r4, [r5, #12]
 800176c:	e7ec      	b.n	8001748 <_fflush_r+0x1c>
 800176e:	2000      	movs	r0, #0
 8001770:	bd38      	pop	{r3, r4, r5, pc}
 8001772:	bf00      	nop
 8001774:	080023bc 	.word	0x080023bc
 8001778:	080023dc 	.word	0x080023dc
 800177c:	0800239c 	.word	0x0800239c

08001780 <std>:
 8001780:	2300      	movs	r3, #0
 8001782:	b510      	push	{r4, lr}
 8001784:	4604      	mov	r4, r0
 8001786:	e9c0 3300 	strd	r3, r3, [r0]
 800178a:	6083      	str	r3, [r0, #8]
 800178c:	8181      	strh	r1, [r0, #12]
 800178e:	6643      	str	r3, [r0, #100]	; 0x64
 8001790:	81c2      	strh	r2, [r0, #14]
 8001792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001796:	6183      	str	r3, [r0, #24]
 8001798:	4619      	mov	r1, r3
 800179a:	2208      	movs	r2, #8
 800179c:	305c      	adds	r0, #92	; 0x5c
 800179e:	f7ff fdfb 	bl	8001398 <memset>
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <std+0x38>)
 80017a4:	6263      	str	r3, [r4, #36]	; 0x24
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <std+0x3c>)
 80017a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <std+0x40>)
 80017ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <std+0x44>)
 80017b0:	6224      	str	r4, [r4, #32]
 80017b2:	6323      	str	r3, [r4, #48]	; 0x30
 80017b4:	bd10      	pop	{r4, pc}
 80017b6:	bf00      	nop
 80017b8:	080020dd 	.word	0x080020dd
 80017bc:	080020ff 	.word	0x080020ff
 80017c0:	08002137 	.word	0x08002137
 80017c4:	0800215b 	.word	0x0800215b

080017c8 <_cleanup_r>:
 80017c8:	4901      	ldr	r1, [pc, #4]	; (80017d0 <_cleanup_r+0x8>)
 80017ca:	f000 b885 	b.w	80018d8 <_fwalk_reent>
 80017ce:	bf00      	nop
 80017d0:	0800172d 	.word	0x0800172d

080017d4 <__sfmoreglue>:
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	1e4a      	subs	r2, r1, #1
 80017d8:	2568      	movs	r5, #104	; 0x68
 80017da:	4355      	muls	r5, r2
 80017dc:	460e      	mov	r6, r1
 80017de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80017e2:	f000 f949 	bl	8001a78 <_malloc_r>
 80017e6:	4604      	mov	r4, r0
 80017e8:	b140      	cbz	r0, 80017fc <__sfmoreglue+0x28>
 80017ea:	2100      	movs	r1, #0
 80017ec:	e9c0 1600 	strd	r1, r6, [r0]
 80017f0:	300c      	adds	r0, #12
 80017f2:	60a0      	str	r0, [r4, #8]
 80017f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017f8:	f7ff fdce 	bl	8001398 <memset>
 80017fc:	4620      	mov	r0, r4
 80017fe:	bd70      	pop	{r4, r5, r6, pc}

08001800 <__sinit>:
 8001800:	6983      	ldr	r3, [r0, #24]
 8001802:	b510      	push	{r4, lr}
 8001804:	4604      	mov	r4, r0
 8001806:	bb33      	cbnz	r3, 8001856 <__sinit+0x56>
 8001808:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800180c:	6503      	str	r3, [r0, #80]	; 0x50
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <__sinit+0x58>)
 8001810:	4a12      	ldr	r2, [pc, #72]	; (800185c <__sinit+0x5c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6282      	str	r2, [r0, #40]	; 0x28
 8001816:	4298      	cmp	r0, r3
 8001818:	bf04      	itt	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	6183      	streq	r3, [r0, #24]
 800181e:	f000 f81f 	bl	8001860 <__sfp>
 8001822:	6060      	str	r0, [r4, #4]
 8001824:	4620      	mov	r0, r4
 8001826:	f000 f81b 	bl	8001860 <__sfp>
 800182a:	60a0      	str	r0, [r4, #8]
 800182c:	4620      	mov	r0, r4
 800182e:	f000 f817 	bl	8001860 <__sfp>
 8001832:	2200      	movs	r2, #0
 8001834:	60e0      	str	r0, [r4, #12]
 8001836:	2104      	movs	r1, #4
 8001838:	6860      	ldr	r0, [r4, #4]
 800183a:	f7ff ffa1 	bl	8001780 <std>
 800183e:	2201      	movs	r2, #1
 8001840:	2109      	movs	r1, #9
 8001842:	68a0      	ldr	r0, [r4, #8]
 8001844:	f7ff ff9c 	bl	8001780 <std>
 8001848:	2202      	movs	r2, #2
 800184a:	2112      	movs	r1, #18
 800184c:	68e0      	ldr	r0, [r4, #12]
 800184e:	f7ff ff97 	bl	8001780 <std>
 8001852:	2301      	movs	r3, #1
 8001854:	61a3      	str	r3, [r4, #24]
 8001856:	bd10      	pop	{r4, pc}
 8001858:	08002398 	.word	0x08002398
 800185c:	080017c9 	.word	0x080017c9

08001860 <__sfp>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <__sfp+0x70>)
 8001864:	681e      	ldr	r6, [r3, #0]
 8001866:	69b3      	ldr	r3, [r6, #24]
 8001868:	4607      	mov	r7, r0
 800186a:	b913      	cbnz	r3, 8001872 <__sfp+0x12>
 800186c:	4630      	mov	r0, r6
 800186e:	f7ff ffc7 	bl	8001800 <__sinit>
 8001872:	3648      	adds	r6, #72	; 0x48
 8001874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001878:	3b01      	subs	r3, #1
 800187a:	d503      	bpl.n	8001884 <__sfp+0x24>
 800187c:	6833      	ldr	r3, [r6, #0]
 800187e:	b133      	cbz	r3, 800188e <__sfp+0x2e>
 8001880:	6836      	ldr	r6, [r6, #0]
 8001882:	e7f7      	b.n	8001874 <__sfp+0x14>
 8001884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001888:	b16d      	cbz	r5, 80018a6 <__sfp+0x46>
 800188a:	3468      	adds	r4, #104	; 0x68
 800188c:	e7f4      	b.n	8001878 <__sfp+0x18>
 800188e:	2104      	movs	r1, #4
 8001890:	4638      	mov	r0, r7
 8001892:	f7ff ff9f 	bl	80017d4 <__sfmoreglue>
 8001896:	6030      	str	r0, [r6, #0]
 8001898:	2800      	cmp	r0, #0
 800189a:	d1f1      	bne.n	8001880 <__sfp+0x20>
 800189c:	230c      	movs	r3, #12
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	4604      	mov	r4, r0
 80018a2:	4620      	mov	r0, r4
 80018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <__sfp+0x74>)
 80018a8:	6665      	str	r5, [r4, #100]	; 0x64
 80018aa:	e9c4 5500 	strd	r5, r5, [r4]
 80018ae:	60a5      	str	r5, [r4, #8]
 80018b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80018b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80018b8:	2208      	movs	r2, #8
 80018ba:	4629      	mov	r1, r5
 80018bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018c0:	f7ff fd6a 	bl	8001398 <memset>
 80018c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018cc:	e7e9      	b.n	80018a2 <__sfp+0x42>
 80018ce:	bf00      	nop
 80018d0:	08002398 	.word	0x08002398
 80018d4:	ffff0001 	.word	0xffff0001

080018d8 <_fwalk_reent>:
 80018d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018dc:	4680      	mov	r8, r0
 80018de:	4689      	mov	r9, r1
 80018e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018e4:	2600      	movs	r6, #0
 80018e6:	b914      	cbnz	r4, 80018ee <_fwalk_reent+0x16>
 80018e8:	4630      	mov	r0, r6
 80018ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80018f2:	3f01      	subs	r7, #1
 80018f4:	d501      	bpl.n	80018fa <_fwalk_reent+0x22>
 80018f6:	6824      	ldr	r4, [r4, #0]
 80018f8:	e7f5      	b.n	80018e6 <_fwalk_reent+0xe>
 80018fa:	89ab      	ldrh	r3, [r5, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d907      	bls.n	8001910 <_fwalk_reent+0x38>
 8001900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001904:	3301      	adds	r3, #1
 8001906:	d003      	beq.n	8001910 <_fwalk_reent+0x38>
 8001908:	4629      	mov	r1, r5
 800190a:	4640      	mov	r0, r8
 800190c:	47c8      	blx	r9
 800190e:	4306      	orrs	r6, r0
 8001910:	3568      	adds	r5, #104	; 0x68
 8001912:	e7ee      	b.n	80018f2 <_fwalk_reent+0x1a>

08001914 <__swhatbuf_r>:
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	460e      	mov	r6, r1
 8001918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800191c:	2900      	cmp	r1, #0
 800191e:	b096      	sub	sp, #88	; 0x58
 8001920:	4614      	mov	r4, r2
 8001922:	461d      	mov	r5, r3
 8001924:	da07      	bge.n	8001936 <__swhatbuf_r+0x22>
 8001926:	2300      	movs	r3, #0
 8001928:	602b      	str	r3, [r5, #0]
 800192a:	89b3      	ldrh	r3, [r6, #12]
 800192c:	061a      	lsls	r2, r3, #24
 800192e:	d410      	bmi.n	8001952 <__swhatbuf_r+0x3e>
 8001930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001934:	e00e      	b.n	8001954 <__swhatbuf_r+0x40>
 8001936:	466a      	mov	r2, sp
 8001938:	f000 fc36 	bl	80021a8 <_fstat_r>
 800193c:	2800      	cmp	r0, #0
 800193e:	dbf2      	blt.n	8001926 <__swhatbuf_r+0x12>
 8001940:	9a01      	ldr	r2, [sp, #4]
 8001942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800194a:	425a      	negs	r2, r3
 800194c:	415a      	adcs	r2, r3
 800194e:	602a      	str	r2, [r5, #0]
 8001950:	e7ee      	b.n	8001930 <__swhatbuf_r+0x1c>
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	2000      	movs	r0, #0
 8001956:	6023      	str	r3, [r4, #0]
 8001958:	b016      	add	sp, #88	; 0x58
 800195a:	bd70      	pop	{r4, r5, r6, pc}

0800195c <__smakebuf_r>:
 800195c:	898b      	ldrh	r3, [r1, #12]
 800195e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001960:	079d      	lsls	r5, r3, #30
 8001962:	4606      	mov	r6, r0
 8001964:	460c      	mov	r4, r1
 8001966:	d507      	bpl.n	8001978 <__smakebuf_r+0x1c>
 8001968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800196c:	6023      	str	r3, [r4, #0]
 800196e:	6123      	str	r3, [r4, #16]
 8001970:	2301      	movs	r3, #1
 8001972:	6163      	str	r3, [r4, #20]
 8001974:	b002      	add	sp, #8
 8001976:	bd70      	pop	{r4, r5, r6, pc}
 8001978:	ab01      	add	r3, sp, #4
 800197a:	466a      	mov	r2, sp
 800197c:	f7ff ffca 	bl	8001914 <__swhatbuf_r>
 8001980:	9900      	ldr	r1, [sp, #0]
 8001982:	4605      	mov	r5, r0
 8001984:	4630      	mov	r0, r6
 8001986:	f000 f877 	bl	8001a78 <_malloc_r>
 800198a:	b948      	cbnz	r0, 80019a0 <__smakebuf_r+0x44>
 800198c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001990:	059a      	lsls	r2, r3, #22
 8001992:	d4ef      	bmi.n	8001974 <__smakebuf_r+0x18>
 8001994:	f023 0303 	bic.w	r3, r3, #3
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	81a3      	strh	r3, [r4, #12]
 800199e:	e7e3      	b.n	8001968 <__smakebuf_r+0xc>
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <__smakebuf_r+0x7c>)
 80019a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80019a4:	89a3      	ldrh	r3, [r4, #12]
 80019a6:	6020      	str	r0, [r4, #0]
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	9b00      	ldr	r3, [sp, #0]
 80019b0:	6163      	str	r3, [r4, #20]
 80019b2:	9b01      	ldr	r3, [sp, #4]
 80019b4:	6120      	str	r0, [r4, #16]
 80019b6:	b15b      	cbz	r3, 80019d0 <__smakebuf_r+0x74>
 80019b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019bc:	4630      	mov	r0, r6
 80019be:	f000 fc05 	bl	80021cc <_isatty_r>
 80019c2:	b128      	cbz	r0, 80019d0 <__smakebuf_r+0x74>
 80019c4:	89a3      	ldrh	r3, [r4, #12]
 80019c6:	f023 0303 	bic.w	r3, r3, #3
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	81a3      	strh	r3, [r4, #12]
 80019d0:	89a3      	ldrh	r3, [r4, #12]
 80019d2:	431d      	orrs	r5, r3
 80019d4:	81a5      	strh	r5, [r4, #12]
 80019d6:	e7cd      	b.n	8001974 <__smakebuf_r+0x18>
 80019d8:	080017c9 	.word	0x080017c9

080019dc <_free_r>:
 80019dc:	b538      	push	{r3, r4, r5, lr}
 80019de:	4605      	mov	r5, r0
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d045      	beq.n	8001a70 <_free_r+0x94>
 80019e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019e8:	1f0c      	subs	r4, r1, #4
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bfb8      	it	lt
 80019ee:	18e4      	addlt	r4, r4, r3
 80019f0:	f000 fc0e 	bl	8002210 <__malloc_lock>
 80019f4:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <_free_r+0x98>)
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	4610      	mov	r0, r2
 80019fa:	b933      	cbnz	r3, 8001a0a <_free_r+0x2e>
 80019fc:	6063      	str	r3, [r4, #4]
 80019fe:	6014      	str	r4, [r2, #0]
 8001a00:	4628      	mov	r0, r5
 8001a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a06:	f000 bc04 	b.w	8002212 <__malloc_unlock>
 8001a0a:	42a3      	cmp	r3, r4
 8001a0c:	d90c      	bls.n	8001a28 <_free_r+0x4c>
 8001a0e:	6821      	ldr	r1, [r4, #0]
 8001a10:	1862      	adds	r2, r4, r1
 8001a12:	4293      	cmp	r3, r2
 8001a14:	bf04      	itt	eq
 8001a16:	681a      	ldreq	r2, [r3, #0]
 8001a18:	685b      	ldreq	r3, [r3, #4]
 8001a1a:	6063      	str	r3, [r4, #4]
 8001a1c:	bf04      	itt	eq
 8001a1e:	1852      	addeq	r2, r2, r1
 8001a20:	6022      	streq	r2, [r4, #0]
 8001a22:	6004      	str	r4, [r0, #0]
 8001a24:	e7ec      	b.n	8001a00 <_free_r+0x24>
 8001a26:	4613      	mov	r3, r2
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	b10a      	cbz	r2, 8001a30 <_free_r+0x54>
 8001a2c:	42a2      	cmp	r2, r4
 8001a2e:	d9fa      	bls.n	8001a26 <_free_r+0x4a>
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	1858      	adds	r0, r3, r1
 8001a34:	42a0      	cmp	r0, r4
 8001a36:	d10b      	bne.n	8001a50 <_free_r+0x74>
 8001a38:	6820      	ldr	r0, [r4, #0]
 8001a3a:	4401      	add	r1, r0
 8001a3c:	1858      	adds	r0, r3, r1
 8001a3e:	4282      	cmp	r2, r0
 8001a40:	6019      	str	r1, [r3, #0]
 8001a42:	d1dd      	bne.n	8001a00 <_free_r+0x24>
 8001a44:	6810      	ldr	r0, [r2, #0]
 8001a46:	6852      	ldr	r2, [r2, #4]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	4401      	add	r1, r0
 8001a4c:	6019      	str	r1, [r3, #0]
 8001a4e:	e7d7      	b.n	8001a00 <_free_r+0x24>
 8001a50:	d902      	bls.n	8001a58 <_free_r+0x7c>
 8001a52:	230c      	movs	r3, #12
 8001a54:	602b      	str	r3, [r5, #0]
 8001a56:	e7d3      	b.n	8001a00 <_free_r+0x24>
 8001a58:	6820      	ldr	r0, [r4, #0]
 8001a5a:	1821      	adds	r1, r4, r0
 8001a5c:	428a      	cmp	r2, r1
 8001a5e:	bf04      	itt	eq
 8001a60:	6811      	ldreq	r1, [r2, #0]
 8001a62:	6852      	ldreq	r2, [r2, #4]
 8001a64:	6062      	str	r2, [r4, #4]
 8001a66:	bf04      	itt	eq
 8001a68:	1809      	addeq	r1, r1, r0
 8001a6a:	6021      	streq	r1, [r4, #0]
 8001a6c:	605c      	str	r4, [r3, #4]
 8001a6e:	e7c7      	b.n	8001a00 <_free_r+0x24>
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
 8001a72:	bf00      	nop
 8001a74:	200000ac 	.word	0x200000ac

08001a78 <_malloc_r>:
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	1ccd      	adds	r5, r1, #3
 8001a7c:	f025 0503 	bic.w	r5, r5, #3
 8001a80:	3508      	adds	r5, #8
 8001a82:	2d0c      	cmp	r5, #12
 8001a84:	bf38      	it	cc
 8001a86:	250c      	movcc	r5, #12
 8001a88:	2d00      	cmp	r5, #0
 8001a8a:	4606      	mov	r6, r0
 8001a8c:	db01      	blt.n	8001a92 <_malloc_r+0x1a>
 8001a8e:	42a9      	cmp	r1, r5
 8001a90:	d903      	bls.n	8001a9a <_malloc_r+0x22>
 8001a92:	230c      	movs	r3, #12
 8001a94:	6033      	str	r3, [r6, #0]
 8001a96:	2000      	movs	r0, #0
 8001a98:	bd70      	pop	{r4, r5, r6, pc}
 8001a9a:	f000 fbb9 	bl	8002210 <__malloc_lock>
 8001a9e:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <_malloc_r+0xac>)
 8001aa0:	6814      	ldr	r4, [r2, #0]
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	b991      	cbnz	r1, 8001acc <_malloc_r+0x54>
 8001aa6:	4c20      	ldr	r4, [pc, #128]	; (8001b28 <_malloc_r+0xb0>)
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	b91b      	cbnz	r3, 8001ab4 <_malloc_r+0x3c>
 8001aac:	4630      	mov	r0, r6
 8001aae:	f000 fb05 	bl	80020bc <_sbrk_r>
 8001ab2:	6020      	str	r0, [r4, #0]
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	f000 fb00 	bl	80020bc <_sbrk_r>
 8001abc:	1c43      	adds	r3, r0, #1
 8001abe:	d124      	bne.n	8001b0a <_malloc_r+0x92>
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	6033      	str	r3, [r6, #0]
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f000 fba4 	bl	8002212 <__malloc_unlock>
 8001aca:	e7e4      	b.n	8001a96 <_malloc_r+0x1e>
 8001acc:	680b      	ldr	r3, [r1, #0]
 8001ace:	1b5b      	subs	r3, r3, r5
 8001ad0:	d418      	bmi.n	8001b04 <_malloc_r+0x8c>
 8001ad2:	2b0b      	cmp	r3, #11
 8001ad4:	d90f      	bls.n	8001af6 <_malloc_r+0x7e>
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	50cd      	str	r5, [r1, r3]
 8001ada:	18cc      	adds	r4, r1, r3
 8001adc:	4630      	mov	r0, r6
 8001ade:	f000 fb98 	bl	8002212 <__malloc_unlock>
 8001ae2:	f104 000b 	add.w	r0, r4, #11
 8001ae6:	1d23      	adds	r3, r4, #4
 8001ae8:	f020 0007 	bic.w	r0, r0, #7
 8001aec:	1ac3      	subs	r3, r0, r3
 8001aee:	d0d3      	beq.n	8001a98 <_malloc_r+0x20>
 8001af0:	425a      	negs	r2, r3
 8001af2:	50e2      	str	r2, [r4, r3]
 8001af4:	e7d0      	b.n	8001a98 <_malloc_r+0x20>
 8001af6:	428c      	cmp	r4, r1
 8001af8:	684b      	ldr	r3, [r1, #4]
 8001afa:	bf16      	itet	ne
 8001afc:	6063      	strne	r3, [r4, #4]
 8001afe:	6013      	streq	r3, [r2, #0]
 8001b00:	460c      	movne	r4, r1
 8001b02:	e7eb      	b.n	8001adc <_malloc_r+0x64>
 8001b04:	460c      	mov	r4, r1
 8001b06:	6849      	ldr	r1, [r1, #4]
 8001b08:	e7cc      	b.n	8001aa4 <_malloc_r+0x2c>
 8001b0a:	1cc4      	adds	r4, r0, #3
 8001b0c:	f024 0403 	bic.w	r4, r4, #3
 8001b10:	42a0      	cmp	r0, r4
 8001b12:	d005      	beq.n	8001b20 <_malloc_r+0xa8>
 8001b14:	1a21      	subs	r1, r4, r0
 8001b16:	4630      	mov	r0, r6
 8001b18:	f000 fad0 	bl	80020bc <_sbrk_r>
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d0cf      	beq.n	8001ac0 <_malloc_r+0x48>
 8001b20:	6025      	str	r5, [r4, #0]
 8001b22:	e7db      	b.n	8001adc <_malloc_r+0x64>
 8001b24:	200000ac 	.word	0x200000ac
 8001b28:	200000b0 	.word	0x200000b0

08001b2c <__sfputc_r>:
 8001b2c:	6893      	ldr	r3, [r2, #8]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	b410      	push	{r4}
 8001b34:	6093      	str	r3, [r2, #8]
 8001b36:	da08      	bge.n	8001b4a <__sfputc_r+0x1e>
 8001b38:	6994      	ldr	r4, [r2, #24]
 8001b3a:	42a3      	cmp	r3, r4
 8001b3c:	db01      	blt.n	8001b42 <__sfputc_r+0x16>
 8001b3e:	290a      	cmp	r1, #10
 8001b40:	d103      	bne.n	8001b4a <__sfputc_r+0x1e>
 8001b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b46:	f7ff bcab 	b.w	80014a0 <__swbuf_r>
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	1c58      	adds	r0, r3, #1
 8001b4e:	6010      	str	r0, [r2, #0]
 8001b50:	7019      	strb	r1, [r3, #0]
 8001b52:	4608      	mov	r0, r1
 8001b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <__sfputs_r>:
 8001b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	460f      	mov	r7, r1
 8001b60:	4614      	mov	r4, r2
 8001b62:	18d5      	adds	r5, r2, r3
 8001b64:	42ac      	cmp	r4, r5
 8001b66:	d101      	bne.n	8001b6c <__sfputs_r+0x12>
 8001b68:	2000      	movs	r0, #0
 8001b6a:	e007      	b.n	8001b7c <__sfputs_r+0x22>
 8001b6c:	463a      	mov	r2, r7
 8001b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b72:	4630      	mov	r0, r6
 8001b74:	f7ff ffda 	bl	8001b2c <__sfputc_r>
 8001b78:	1c43      	adds	r3, r0, #1
 8001b7a:	d1f3      	bne.n	8001b64 <__sfputs_r+0xa>
 8001b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b80 <_vfiprintf_r>:
 8001b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b84:	460c      	mov	r4, r1
 8001b86:	b09d      	sub	sp, #116	; 0x74
 8001b88:	4617      	mov	r7, r2
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	4606      	mov	r6, r0
 8001b8e:	b118      	cbz	r0, 8001b98 <_vfiprintf_r+0x18>
 8001b90:	6983      	ldr	r3, [r0, #24]
 8001b92:	b90b      	cbnz	r3, 8001b98 <_vfiprintf_r+0x18>
 8001b94:	f7ff fe34 	bl	8001800 <__sinit>
 8001b98:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <_vfiprintf_r+0x20c>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d158      	bne.n	8001c50 <_vfiprintf_r+0xd0>
 8001b9e:	6874      	ldr	r4, [r6, #4]
 8001ba0:	89a3      	ldrh	r3, [r4, #12]
 8001ba2:	0718      	lsls	r0, r3, #28
 8001ba4:	d55e      	bpl.n	8001c64 <_vfiprintf_r+0xe4>
 8001ba6:	6923      	ldr	r3, [r4, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05b      	beq.n	8001c64 <_vfiprintf_r+0xe4>
 8001bac:	2300      	movs	r3, #0
 8001bae:	9309      	str	r3, [sp, #36]	; 0x24
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bb6:	2330      	movs	r3, #48	; 0x30
 8001bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bbc:	9503      	str	r5, [sp, #12]
 8001bbe:	f04f 0b01 	mov.w	fp, #1
 8001bc2:	46b8      	mov	r8, r7
 8001bc4:	4645      	mov	r5, r8
 8001bc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001bca:	b10b      	cbz	r3, 8001bd0 <_vfiprintf_r+0x50>
 8001bcc:	2b25      	cmp	r3, #37	; 0x25
 8001bce:	d154      	bne.n	8001c7a <_vfiprintf_r+0xfa>
 8001bd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8001bd4:	d00b      	beq.n	8001bee <_vfiprintf_r+0x6e>
 8001bd6:	4653      	mov	r3, sl
 8001bd8:	463a      	mov	r2, r7
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4630      	mov	r0, r6
 8001bde:	f7ff ffbc 	bl	8001b5a <__sfputs_r>
 8001be2:	3001      	adds	r0, #1
 8001be4:	f000 80c2 	beq.w	8001d6c <_vfiprintf_r+0x1ec>
 8001be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bea:	4453      	add	r3, sl
 8001bec:	9309      	str	r3, [sp, #36]	; 0x24
 8001bee:	f898 3000 	ldrb.w	r3, [r8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80ba 	beq.w	8001d6c <_vfiprintf_r+0x1ec>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	9307      	str	r3, [sp, #28]
 8001c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8001c0c:	46a8      	mov	r8, r5
 8001c0e:	2205      	movs	r2, #5
 8001c10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001c14:	485e      	ldr	r0, [pc, #376]	; (8001d90 <_vfiprintf_r+0x210>)
 8001c16:	f7fe fae3 	bl	80001e0 <memchr>
 8001c1a:	9b04      	ldr	r3, [sp, #16]
 8001c1c:	bb78      	cbnz	r0, 8001c7e <_vfiprintf_r+0xfe>
 8001c1e:	06d9      	lsls	r1, r3, #27
 8001c20:	bf44      	itt	mi
 8001c22:	2220      	movmi	r2, #32
 8001c24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c28:	071a      	lsls	r2, r3, #28
 8001c2a:	bf44      	itt	mi
 8001c2c:	222b      	movmi	r2, #43	; 0x2b
 8001c2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c32:	782a      	ldrb	r2, [r5, #0]
 8001c34:	2a2a      	cmp	r2, #42	; 0x2a
 8001c36:	d02a      	beq.n	8001c8e <_vfiprintf_r+0x10e>
 8001c38:	9a07      	ldr	r2, [sp, #28]
 8001c3a:	46a8      	mov	r8, r5
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	250a      	movs	r5, #10
 8001c40:	4641      	mov	r1, r8
 8001c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c46:	3b30      	subs	r3, #48	; 0x30
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d969      	bls.n	8001d20 <_vfiprintf_r+0x1a0>
 8001c4c:	b360      	cbz	r0, 8001ca8 <_vfiprintf_r+0x128>
 8001c4e:	e024      	b.n	8001c9a <_vfiprintf_r+0x11a>
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <_vfiprintf_r+0x214>)
 8001c52:	429c      	cmp	r4, r3
 8001c54:	d101      	bne.n	8001c5a <_vfiprintf_r+0xda>
 8001c56:	68b4      	ldr	r4, [r6, #8]
 8001c58:	e7a2      	b.n	8001ba0 <_vfiprintf_r+0x20>
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <_vfiprintf_r+0x218>)
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	bf08      	it	eq
 8001c60:	68f4      	ldreq	r4, [r6, #12]
 8001c62:	e79d      	b.n	8001ba0 <_vfiprintf_r+0x20>
 8001c64:	4621      	mov	r1, r4
 8001c66:	4630      	mov	r0, r6
 8001c68:	f7ff fc6c 	bl	8001544 <__swsetup_r>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d09d      	beq.n	8001bac <_vfiprintf_r+0x2c>
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c74:	b01d      	add	sp, #116	; 0x74
 8001c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c7a:	46a8      	mov	r8, r5
 8001c7c:	e7a2      	b.n	8001bc4 <_vfiprintf_r+0x44>
 8001c7e:	4a44      	ldr	r2, [pc, #272]	; (8001d90 <_vfiprintf_r+0x210>)
 8001c80:	1a80      	subs	r0, r0, r2
 8001c82:	fa0b f000 	lsl.w	r0, fp, r0
 8001c86:	4318      	orrs	r0, r3
 8001c88:	9004      	str	r0, [sp, #16]
 8001c8a:	4645      	mov	r5, r8
 8001c8c:	e7be      	b.n	8001c0c <_vfiprintf_r+0x8c>
 8001c8e:	9a03      	ldr	r2, [sp, #12]
 8001c90:	1d11      	adds	r1, r2, #4
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	9103      	str	r1, [sp, #12]
 8001c96:	2a00      	cmp	r2, #0
 8001c98:	db01      	blt.n	8001c9e <_vfiprintf_r+0x11e>
 8001c9a:	9207      	str	r2, [sp, #28]
 8001c9c:	e004      	b.n	8001ca8 <_vfiprintf_r+0x128>
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	9207      	str	r2, [sp, #28]
 8001ca6:	9304      	str	r3, [sp, #16]
 8001ca8:	f898 3000 	ldrb.w	r3, [r8]
 8001cac:	2b2e      	cmp	r3, #46	; 0x2e
 8001cae:	d10e      	bne.n	8001cce <_vfiprintf_r+0x14e>
 8001cb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb6:	d138      	bne.n	8001d2a <_vfiprintf_r+0x1aa>
 8001cb8:	9b03      	ldr	r3, [sp, #12]
 8001cba:	1d1a      	adds	r2, r3, #4
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	9203      	str	r2, [sp, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bfb8      	it	lt
 8001cc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001cc8:	f108 0802 	add.w	r8, r8, #2
 8001ccc:	9305      	str	r3, [sp, #20]
 8001cce:	4d33      	ldr	r5, [pc, #204]	; (8001d9c <_vfiprintf_r+0x21c>)
 8001cd0:	f898 1000 	ldrb.w	r1, [r8]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f7fe fa82 	bl	80001e0 <memchr>
 8001cdc:	b140      	cbz	r0, 8001cf0 <_vfiprintf_r+0x170>
 8001cde:	2340      	movs	r3, #64	; 0x40
 8001ce0:	1b40      	subs	r0, r0, r5
 8001ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8001ce6:	9b04      	ldr	r3, [sp, #16]
 8001ce8:	4303      	orrs	r3, r0
 8001cea:	f108 0801 	add.w	r8, r8, #1
 8001cee:	9304      	str	r3, [sp, #16]
 8001cf0:	f898 1000 	ldrb.w	r1, [r8]
 8001cf4:	482a      	ldr	r0, [pc, #168]	; (8001da0 <_vfiprintf_r+0x220>)
 8001cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cfa:	2206      	movs	r2, #6
 8001cfc:	f108 0701 	add.w	r7, r8, #1
 8001d00:	f7fe fa6e 	bl	80001e0 <memchr>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d037      	beq.n	8001d78 <_vfiprintf_r+0x1f8>
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <_vfiprintf_r+0x224>)
 8001d0a:	bb1b      	cbnz	r3, 8001d54 <_vfiprintf_r+0x1d4>
 8001d0c:	9b03      	ldr	r3, [sp, #12]
 8001d0e:	3307      	adds	r3, #7
 8001d10:	f023 0307 	bic.w	r3, r3, #7
 8001d14:	3308      	adds	r3, #8
 8001d16:	9303      	str	r3, [sp, #12]
 8001d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d1a:	444b      	add	r3, r9
 8001d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d1e:	e750      	b.n	8001bc2 <_vfiprintf_r+0x42>
 8001d20:	fb05 3202 	mla	r2, r5, r2, r3
 8001d24:	2001      	movs	r0, #1
 8001d26:	4688      	mov	r8, r1
 8001d28:	e78a      	b.n	8001c40 <_vfiprintf_r+0xc0>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f108 0801 	add.w	r8, r8, #1
 8001d30:	9305      	str	r3, [sp, #20]
 8001d32:	4619      	mov	r1, r3
 8001d34:	250a      	movs	r5, #10
 8001d36:	4640      	mov	r0, r8
 8001d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d3c:	3a30      	subs	r2, #48	; 0x30
 8001d3e:	2a09      	cmp	r2, #9
 8001d40:	d903      	bls.n	8001d4a <_vfiprintf_r+0x1ca>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0c3      	beq.n	8001cce <_vfiprintf_r+0x14e>
 8001d46:	9105      	str	r1, [sp, #20]
 8001d48:	e7c1      	b.n	8001cce <_vfiprintf_r+0x14e>
 8001d4a:	fb05 2101 	mla	r1, r5, r1, r2
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4680      	mov	r8, r0
 8001d52:	e7f0      	b.n	8001d36 <_vfiprintf_r+0x1b6>
 8001d54:	ab03      	add	r3, sp, #12
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4622      	mov	r2, r4
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <_vfiprintf_r+0x228>)
 8001d5c:	a904      	add	r1, sp, #16
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f3af 8000 	nop.w
 8001d64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001d68:	4681      	mov	r9, r0
 8001d6a:	d1d5      	bne.n	8001d18 <_vfiprintf_r+0x198>
 8001d6c:	89a3      	ldrh	r3, [r4, #12]
 8001d6e:	065b      	lsls	r3, r3, #25
 8001d70:	f53f af7e 	bmi.w	8001c70 <_vfiprintf_r+0xf0>
 8001d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d76:	e77d      	b.n	8001c74 <_vfiprintf_r+0xf4>
 8001d78:	ab03      	add	r3, sp, #12
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <_vfiprintf_r+0x228>)
 8001d80:	a904      	add	r1, sp, #16
 8001d82:	4630      	mov	r0, r6
 8001d84:	f000 f888 	bl	8001e98 <_printf_i>
 8001d88:	e7ec      	b.n	8001d64 <_vfiprintf_r+0x1e4>
 8001d8a:	bf00      	nop
 8001d8c:	080023bc 	.word	0x080023bc
 8001d90:	080023fc 	.word	0x080023fc
 8001d94:	080023dc 	.word	0x080023dc
 8001d98:	0800239c 	.word	0x0800239c
 8001d9c:	08002402 	.word	0x08002402
 8001da0:	08002406 	.word	0x08002406
 8001da4:	00000000 	.word	0x00000000
 8001da8:	08001b5b 	.word	0x08001b5b

08001dac <_printf_common>:
 8001dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001db0:	4691      	mov	r9, r2
 8001db2:	461f      	mov	r7, r3
 8001db4:	688a      	ldr	r2, [r1, #8]
 8001db6:	690b      	ldr	r3, [r1, #16]
 8001db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	bfb8      	it	lt
 8001dc0:	4613      	movlt	r3, r2
 8001dc2:	f8c9 3000 	str.w	r3, [r9]
 8001dc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001dca:	4606      	mov	r6, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	b112      	cbz	r2, 8001dd6 <_printf_common+0x2a>
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f8c9 3000 	str.w	r3, [r9]
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	0699      	lsls	r1, r3, #26
 8001dda:	bf42      	ittt	mi
 8001ddc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001de0:	3302      	addmi	r3, #2
 8001de2:	f8c9 3000 	strmi.w	r3, [r9]
 8001de6:	6825      	ldr	r5, [r4, #0]
 8001de8:	f015 0506 	ands.w	r5, r5, #6
 8001dec:	d107      	bne.n	8001dfe <_printf_common+0x52>
 8001dee:	f104 0a19 	add.w	sl, r4, #25
 8001df2:	68e3      	ldr	r3, [r4, #12]
 8001df4:	f8d9 2000 	ldr.w	r2, [r9]
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	42ab      	cmp	r3, r5
 8001dfc:	dc28      	bgt.n	8001e50 <_printf_common+0xa4>
 8001dfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	3300      	adds	r3, #0
 8001e06:	bf18      	it	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	0692      	lsls	r2, r2, #26
 8001e0c:	d42d      	bmi.n	8001e6a <_printf_common+0xbe>
 8001e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e12:	4639      	mov	r1, r7
 8001e14:	4630      	mov	r0, r6
 8001e16:	47c0      	blx	r8
 8001e18:	3001      	adds	r0, #1
 8001e1a:	d020      	beq.n	8001e5e <_printf_common+0xb2>
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	68e5      	ldr	r5, [r4, #12]
 8001e20:	f8d9 2000 	ldr.w	r2, [r9]
 8001e24:	f003 0306 	and.w	r3, r3, #6
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	bf08      	it	eq
 8001e2c:	1aad      	subeq	r5, r5, r2
 8001e2e:	68a3      	ldr	r3, [r4, #8]
 8001e30:	6922      	ldr	r2, [r4, #16]
 8001e32:	bf0c      	ite	eq
 8001e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e38:	2500      	movne	r5, #0
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	bfc4      	itt	gt
 8001e3e:	1a9b      	subgt	r3, r3, r2
 8001e40:	18ed      	addgt	r5, r5, r3
 8001e42:	f04f 0900 	mov.w	r9, #0
 8001e46:	341a      	adds	r4, #26
 8001e48:	454d      	cmp	r5, r9
 8001e4a:	d11a      	bne.n	8001e82 <_printf_common+0xd6>
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	e008      	b.n	8001e62 <_printf_common+0xb6>
 8001e50:	2301      	movs	r3, #1
 8001e52:	4652      	mov	r2, sl
 8001e54:	4639      	mov	r1, r7
 8001e56:	4630      	mov	r0, r6
 8001e58:	47c0      	blx	r8
 8001e5a:	3001      	adds	r0, #1
 8001e5c:	d103      	bne.n	8001e66 <_printf_common+0xba>
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e66:	3501      	adds	r5, #1
 8001e68:	e7c3      	b.n	8001df2 <_printf_common+0x46>
 8001e6a:	18e1      	adds	r1, r4, r3
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	2030      	movs	r0, #48	; 0x30
 8001e70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e74:	4422      	add	r2, r4
 8001e76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e7e:	3302      	adds	r3, #2
 8001e80:	e7c5      	b.n	8001e0e <_printf_common+0x62>
 8001e82:	2301      	movs	r3, #1
 8001e84:	4622      	mov	r2, r4
 8001e86:	4639      	mov	r1, r7
 8001e88:	4630      	mov	r0, r6
 8001e8a:	47c0      	blx	r8
 8001e8c:	3001      	adds	r0, #1
 8001e8e:	d0e6      	beq.n	8001e5e <_printf_common+0xb2>
 8001e90:	f109 0901 	add.w	r9, r9, #1
 8001e94:	e7d8      	b.n	8001e48 <_printf_common+0x9c>
	...

08001e98 <_printf_i>:
 8001e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	7e09      	ldrb	r1, [r1, #24]
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	296e      	cmp	r1, #110	; 0x6e
 8001ea8:	4617      	mov	r7, r2
 8001eaa:	4606      	mov	r6, r0
 8001eac:	4698      	mov	r8, r3
 8001eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001eb0:	f000 80b3 	beq.w	800201a <_printf_i+0x182>
 8001eb4:	d822      	bhi.n	8001efc <_printf_i+0x64>
 8001eb6:	2963      	cmp	r1, #99	; 0x63
 8001eb8:	d036      	beq.n	8001f28 <_printf_i+0x90>
 8001eba:	d80a      	bhi.n	8001ed2 <_printf_i+0x3a>
 8001ebc:	2900      	cmp	r1, #0
 8001ebe:	f000 80b9 	beq.w	8002034 <_printf_i+0x19c>
 8001ec2:	2958      	cmp	r1, #88	; 0x58
 8001ec4:	f000 8083 	beq.w	8001fce <_printf_i+0x136>
 8001ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ecc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001ed0:	e032      	b.n	8001f38 <_printf_i+0xa0>
 8001ed2:	2964      	cmp	r1, #100	; 0x64
 8001ed4:	d001      	beq.n	8001eda <_printf_i+0x42>
 8001ed6:	2969      	cmp	r1, #105	; 0x69
 8001ed8:	d1f6      	bne.n	8001ec8 <_printf_i+0x30>
 8001eda:	6820      	ldr	r0, [r4, #0]
 8001edc:	6813      	ldr	r3, [r2, #0]
 8001ede:	0605      	lsls	r5, r0, #24
 8001ee0:	f103 0104 	add.w	r1, r3, #4
 8001ee4:	d52a      	bpl.n	8001f3c <_printf_i+0xa4>
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6011      	str	r1, [r2, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da03      	bge.n	8001ef6 <_printf_i+0x5e>
 8001eee:	222d      	movs	r2, #45	; 0x2d
 8001ef0:	425b      	negs	r3, r3
 8001ef2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001ef6:	486f      	ldr	r0, [pc, #444]	; (80020b4 <_printf_i+0x21c>)
 8001ef8:	220a      	movs	r2, #10
 8001efa:	e039      	b.n	8001f70 <_printf_i+0xd8>
 8001efc:	2973      	cmp	r1, #115	; 0x73
 8001efe:	f000 809d 	beq.w	800203c <_printf_i+0x1a4>
 8001f02:	d808      	bhi.n	8001f16 <_printf_i+0x7e>
 8001f04:	296f      	cmp	r1, #111	; 0x6f
 8001f06:	d020      	beq.n	8001f4a <_printf_i+0xb2>
 8001f08:	2970      	cmp	r1, #112	; 0x70
 8001f0a:	d1dd      	bne.n	8001ec8 <_printf_i+0x30>
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	6023      	str	r3, [r4, #0]
 8001f14:	e003      	b.n	8001f1e <_printf_i+0x86>
 8001f16:	2975      	cmp	r1, #117	; 0x75
 8001f18:	d017      	beq.n	8001f4a <_printf_i+0xb2>
 8001f1a:	2978      	cmp	r1, #120	; 0x78
 8001f1c:	d1d4      	bne.n	8001ec8 <_printf_i+0x30>
 8001f1e:	2378      	movs	r3, #120	; 0x78
 8001f20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f24:	4864      	ldr	r0, [pc, #400]	; (80020b8 <_printf_i+0x220>)
 8001f26:	e055      	b.n	8001fd4 <_printf_i+0x13c>
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	1d19      	adds	r1, r3, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6011      	str	r1, [r2, #0]
 8001f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e08c      	b.n	8002056 <_printf_i+0x1be>
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6011      	str	r1, [r2, #0]
 8001f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f44:	bf18      	it	ne
 8001f46:	b21b      	sxthne	r3, r3
 8001f48:	e7cf      	b.n	8001eea <_printf_i+0x52>
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	6825      	ldr	r5, [r4, #0]
 8001f4e:	1d18      	adds	r0, r3, #4
 8001f50:	6010      	str	r0, [r2, #0]
 8001f52:	0628      	lsls	r0, r5, #24
 8001f54:	d501      	bpl.n	8001f5a <_printf_i+0xc2>
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e002      	b.n	8001f60 <_printf_i+0xc8>
 8001f5a:	0668      	lsls	r0, r5, #25
 8001f5c:	d5fb      	bpl.n	8001f56 <_printf_i+0xbe>
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	4854      	ldr	r0, [pc, #336]	; (80020b4 <_printf_i+0x21c>)
 8001f62:	296f      	cmp	r1, #111	; 0x6f
 8001f64:	bf14      	ite	ne
 8001f66:	220a      	movne	r2, #10
 8001f68:	2208      	moveq	r2, #8
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f70:	6865      	ldr	r5, [r4, #4]
 8001f72:	60a5      	str	r5, [r4, #8]
 8001f74:	2d00      	cmp	r5, #0
 8001f76:	f2c0 8095 	blt.w	80020a4 <_printf_i+0x20c>
 8001f7a:	6821      	ldr	r1, [r4, #0]
 8001f7c:	f021 0104 	bic.w	r1, r1, #4
 8001f80:	6021      	str	r1, [r4, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d13d      	bne.n	8002002 <_printf_i+0x16a>
 8001f86:	2d00      	cmp	r5, #0
 8001f88:	f040 808e 	bne.w	80020a8 <_printf_i+0x210>
 8001f8c:	4665      	mov	r5, ip
 8001f8e:	2a08      	cmp	r2, #8
 8001f90:	d10b      	bne.n	8001faa <_printf_i+0x112>
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	07db      	lsls	r3, r3, #31
 8001f96:	d508      	bpl.n	8001faa <_printf_i+0x112>
 8001f98:	6923      	ldr	r3, [r4, #16]
 8001f9a:	6862      	ldr	r2, [r4, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	bfde      	ittt	le
 8001fa0:	2330      	movle	r3, #48	; 0x30
 8001fa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fa6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001faa:	ebac 0305 	sub.w	r3, ip, r5
 8001fae:	6123      	str	r3, [r4, #16]
 8001fb0:	f8cd 8000 	str.w	r8, [sp]
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	aa03      	add	r2, sp, #12
 8001fb8:	4621      	mov	r1, r4
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff fef6 	bl	8001dac <_printf_common>
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d14d      	bne.n	8002060 <_printf_i+0x1c8>
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc8:	b005      	add	sp, #20
 8001fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fce:	4839      	ldr	r0, [pc, #228]	; (80020b4 <_printf_i+0x21c>)
 8001fd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001fd4:	6813      	ldr	r3, [r2, #0]
 8001fd6:	6821      	ldr	r1, [r4, #0]
 8001fd8:	1d1d      	adds	r5, r3, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6015      	str	r5, [r2, #0]
 8001fde:	060a      	lsls	r2, r1, #24
 8001fe0:	d50b      	bpl.n	8001ffa <_printf_i+0x162>
 8001fe2:	07ca      	lsls	r2, r1, #31
 8001fe4:	bf44      	itt	mi
 8001fe6:	f041 0120 	orrmi.w	r1, r1, #32
 8001fea:	6021      	strmi	r1, [r4, #0]
 8001fec:	b91b      	cbnz	r3, 8001ff6 <_printf_i+0x15e>
 8001fee:	6822      	ldr	r2, [r4, #0]
 8001ff0:	f022 0220 	bic.w	r2, r2, #32
 8001ff4:	6022      	str	r2, [r4, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	e7b7      	b.n	8001f6a <_printf_i+0xd2>
 8001ffa:	064d      	lsls	r5, r1, #25
 8001ffc:	bf48      	it	mi
 8001ffe:	b29b      	uxthmi	r3, r3
 8002000:	e7ef      	b.n	8001fe2 <_printf_i+0x14a>
 8002002:	4665      	mov	r5, ip
 8002004:	fbb3 f1f2 	udiv	r1, r3, r2
 8002008:	fb02 3311 	mls	r3, r2, r1, r3
 800200c:	5cc3      	ldrb	r3, [r0, r3]
 800200e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002012:	460b      	mov	r3, r1
 8002014:	2900      	cmp	r1, #0
 8002016:	d1f5      	bne.n	8002004 <_printf_i+0x16c>
 8002018:	e7b9      	b.n	8001f8e <_printf_i+0xf6>
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	6825      	ldr	r5, [r4, #0]
 800201e:	6961      	ldr	r1, [r4, #20]
 8002020:	1d18      	adds	r0, r3, #4
 8002022:	6010      	str	r0, [r2, #0]
 8002024:	0628      	lsls	r0, r5, #24
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	d501      	bpl.n	800202e <_printf_i+0x196>
 800202a:	6019      	str	r1, [r3, #0]
 800202c:	e002      	b.n	8002034 <_printf_i+0x19c>
 800202e:	066a      	lsls	r2, r5, #25
 8002030:	d5fb      	bpl.n	800202a <_printf_i+0x192>
 8002032:	8019      	strh	r1, [r3, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	6123      	str	r3, [r4, #16]
 8002038:	4665      	mov	r5, ip
 800203a:	e7b9      	b.n	8001fb0 <_printf_i+0x118>
 800203c:	6813      	ldr	r3, [r2, #0]
 800203e:	1d19      	adds	r1, r3, #4
 8002040:	6011      	str	r1, [r2, #0]
 8002042:	681d      	ldr	r5, [r3, #0]
 8002044:	6862      	ldr	r2, [r4, #4]
 8002046:	2100      	movs	r1, #0
 8002048:	4628      	mov	r0, r5
 800204a:	f7fe f8c9 	bl	80001e0 <memchr>
 800204e:	b108      	cbz	r0, 8002054 <_printf_i+0x1bc>
 8002050:	1b40      	subs	r0, r0, r5
 8002052:	6060      	str	r0, [r4, #4]
 8002054:	6863      	ldr	r3, [r4, #4]
 8002056:	6123      	str	r3, [r4, #16]
 8002058:	2300      	movs	r3, #0
 800205a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800205e:	e7a7      	b.n	8001fb0 <_printf_i+0x118>
 8002060:	6923      	ldr	r3, [r4, #16]
 8002062:	462a      	mov	r2, r5
 8002064:	4639      	mov	r1, r7
 8002066:	4630      	mov	r0, r6
 8002068:	47c0      	blx	r8
 800206a:	3001      	adds	r0, #1
 800206c:	d0aa      	beq.n	8001fc4 <_printf_i+0x12c>
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	079b      	lsls	r3, r3, #30
 8002072:	d413      	bmi.n	800209c <_printf_i+0x204>
 8002074:	68e0      	ldr	r0, [r4, #12]
 8002076:	9b03      	ldr	r3, [sp, #12]
 8002078:	4298      	cmp	r0, r3
 800207a:	bfb8      	it	lt
 800207c:	4618      	movlt	r0, r3
 800207e:	e7a3      	b.n	8001fc8 <_printf_i+0x130>
 8002080:	2301      	movs	r3, #1
 8002082:	464a      	mov	r2, r9
 8002084:	4639      	mov	r1, r7
 8002086:	4630      	mov	r0, r6
 8002088:	47c0      	blx	r8
 800208a:	3001      	adds	r0, #1
 800208c:	d09a      	beq.n	8001fc4 <_printf_i+0x12c>
 800208e:	3501      	adds	r5, #1
 8002090:	68e3      	ldr	r3, [r4, #12]
 8002092:	9a03      	ldr	r2, [sp, #12]
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	42ab      	cmp	r3, r5
 8002098:	dcf2      	bgt.n	8002080 <_printf_i+0x1e8>
 800209a:	e7eb      	b.n	8002074 <_printf_i+0x1dc>
 800209c:	2500      	movs	r5, #0
 800209e:	f104 0919 	add.w	r9, r4, #25
 80020a2:	e7f5      	b.n	8002090 <_printf_i+0x1f8>
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ac      	bne.n	8002002 <_printf_i+0x16a>
 80020a8:	7803      	ldrb	r3, [r0, #0]
 80020aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020b2:	e76c      	b.n	8001f8e <_printf_i+0xf6>
 80020b4:	0800240d 	.word	0x0800240d
 80020b8:	0800241e 	.word	0x0800241e

080020bc <_sbrk_r>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	4c06      	ldr	r4, [pc, #24]	; (80020d8 <_sbrk_r+0x1c>)
 80020c0:	2300      	movs	r3, #0
 80020c2:	4605      	mov	r5, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	6023      	str	r3, [r4, #0]
 80020c8:	f000 f8de 	bl	8002288 <_sbrk>
 80020cc:	1c43      	adds	r3, r0, #1
 80020ce:	d102      	bne.n	80020d6 <_sbrk_r+0x1a>
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	b103      	cbz	r3, 80020d6 <_sbrk_r+0x1a>
 80020d4:	602b      	str	r3, [r5, #0]
 80020d6:	bd38      	pop	{r3, r4, r5, pc}
 80020d8:	200000e0 	.word	0x200000e0

080020dc <__sread>:
 80020dc:	b510      	push	{r4, lr}
 80020de:	460c      	mov	r4, r1
 80020e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020e4:	f000 f896 	bl	8002214 <_read_r>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	bfab      	itete	ge
 80020ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020ee:	89a3      	ldrhlt	r3, [r4, #12]
 80020f0:	181b      	addge	r3, r3, r0
 80020f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020f6:	bfac      	ite	ge
 80020f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80020fa:	81a3      	strhlt	r3, [r4, #12]
 80020fc:	bd10      	pop	{r4, pc}

080020fe <__swrite>:
 80020fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002102:	461f      	mov	r7, r3
 8002104:	898b      	ldrh	r3, [r1, #12]
 8002106:	05db      	lsls	r3, r3, #23
 8002108:	4605      	mov	r5, r0
 800210a:	460c      	mov	r4, r1
 800210c:	4616      	mov	r6, r2
 800210e:	d505      	bpl.n	800211c <__swrite+0x1e>
 8002110:	2302      	movs	r3, #2
 8002112:	2200      	movs	r2, #0
 8002114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002118:	f000 f868 	bl	80021ec <_lseek_r>
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002126:	81a3      	strh	r3, [r4, #12]
 8002128:	4632      	mov	r2, r6
 800212a:	463b      	mov	r3, r7
 800212c:	4628      	mov	r0, r5
 800212e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002132:	f000 b817 	b.w	8002164 <_write_r>

08002136 <__sseek>:
 8002136:	b510      	push	{r4, lr}
 8002138:	460c      	mov	r4, r1
 800213a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800213e:	f000 f855 	bl	80021ec <_lseek_r>
 8002142:	1c43      	adds	r3, r0, #1
 8002144:	89a3      	ldrh	r3, [r4, #12]
 8002146:	bf15      	itete	ne
 8002148:	6560      	strne	r0, [r4, #84]	; 0x54
 800214a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800214e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002152:	81a3      	strheq	r3, [r4, #12]
 8002154:	bf18      	it	ne
 8002156:	81a3      	strhne	r3, [r4, #12]
 8002158:	bd10      	pop	{r4, pc}

0800215a <__sclose>:
 800215a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800215e:	f000 b813 	b.w	8002188 <_close_r>
	...

08002164 <_write_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4c07      	ldr	r4, [pc, #28]	; (8002184 <_write_r+0x20>)
 8002168:	4605      	mov	r5, r0
 800216a:	4608      	mov	r0, r1
 800216c:	4611      	mov	r1, r2
 800216e:	2200      	movs	r2, #0
 8002170:	6022      	str	r2, [r4, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	f000 f896 	bl	80022a4 <_write>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d102      	bne.n	8002182 <_write_r+0x1e>
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	b103      	cbz	r3, 8002182 <_write_r+0x1e>
 8002180:	602b      	str	r3, [r5, #0]
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	200000e0 	.word	0x200000e0

08002188 <_close_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4c06      	ldr	r4, [pc, #24]	; (80021a4 <_close_r+0x1c>)
 800218c:	2300      	movs	r3, #0
 800218e:	4605      	mov	r5, r0
 8002190:	4608      	mov	r0, r1
 8002192:	6023      	str	r3, [r4, #0]
 8002194:	f000 f850 	bl	8002238 <_close>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_close_r+0x1a>
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_close_r+0x1a>
 80021a0:	602b      	str	r3, [r5, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	200000e0 	.word	0x200000e0

080021a8 <_fstat_r>:
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4c07      	ldr	r4, [pc, #28]	; (80021c8 <_fstat_r+0x20>)
 80021ac:	2300      	movs	r3, #0
 80021ae:	4605      	mov	r5, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	6023      	str	r3, [r4, #0]
 80021b6:	f000 f847 	bl	8002248 <_fstat>
 80021ba:	1c43      	adds	r3, r0, #1
 80021bc:	d102      	bne.n	80021c4 <_fstat_r+0x1c>
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	b103      	cbz	r3, 80021c4 <_fstat_r+0x1c>
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	bd38      	pop	{r3, r4, r5, pc}
 80021c6:	bf00      	nop
 80021c8:	200000e0 	.word	0x200000e0

080021cc <_isatty_r>:
 80021cc:	b538      	push	{r3, r4, r5, lr}
 80021ce:	4c06      	ldr	r4, [pc, #24]	; (80021e8 <_isatty_r+0x1c>)
 80021d0:	2300      	movs	r3, #0
 80021d2:	4605      	mov	r5, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	6023      	str	r3, [r4, #0]
 80021d8:	f000 f83e 	bl	8002258 <_isatty>
 80021dc:	1c43      	adds	r3, r0, #1
 80021de:	d102      	bne.n	80021e6 <_isatty_r+0x1a>
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	b103      	cbz	r3, 80021e6 <_isatty_r+0x1a>
 80021e4:	602b      	str	r3, [r5, #0]
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	200000e0 	.word	0x200000e0

080021ec <_lseek_r>:
 80021ec:	b538      	push	{r3, r4, r5, lr}
 80021ee:	4c07      	ldr	r4, [pc, #28]	; (800220c <_lseek_r+0x20>)
 80021f0:	4605      	mov	r5, r0
 80021f2:	4608      	mov	r0, r1
 80021f4:	4611      	mov	r1, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	6022      	str	r2, [r4, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f000 f834 	bl	8002268 <_lseek>
 8002200:	1c43      	adds	r3, r0, #1
 8002202:	d102      	bne.n	800220a <_lseek_r+0x1e>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	b103      	cbz	r3, 800220a <_lseek_r+0x1e>
 8002208:	602b      	str	r3, [r5, #0]
 800220a:	bd38      	pop	{r3, r4, r5, pc}
 800220c:	200000e0 	.word	0x200000e0

08002210 <__malloc_lock>:
 8002210:	4770      	bx	lr

08002212 <__malloc_unlock>:
 8002212:	4770      	bx	lr

08002214 <_read_r>:
 8002214:	b538      	push	{r3, r4, r5, lr}
 8002216:	4c07      	ldr	r4, [pc, #28]	; (8002234 <_read_r+0x20>)
 8002218:	4605      	mov	r5, r0
 800221a:	4608      	mov	r0, r1
 800221c:	4611      	mov	r1, r2
 800221e:	2200      	movs	r2, #0
 8002220:	6022      	str	r2, [r4, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	f000 f828 	bl	8002278 <_read>
 8002228:	1c43      	adds	r3, r0, #1
 800222a:	d102      	bne.n	8002232 <_read_r+0x1e>
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	b103      	cbz	r3, 8002232 <_read_r+0x1e>
 8002230:	602b      	str	r3, [r5, #0]
 8002232:	bd38      	pop	{r3, r4, r5, pc}
 8002234:	200000e0 	.word	0x200000e0

08002238 <_close>:
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <_close+0xc>)
 800223a:	2258      	movs	r2, #88	; 0x58
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002242:	4770      	bx	lr
 8002244:	200000e0 	.word	0x200000e0

08002248 <_fstat>:
 8002248:	4b02      	ldr	r3, [pc, #8]	; (8002254 <_fstat+0xc>)
 800224a:	2258      	movs	r2, #88	; 0x58
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002252:	4770      	bx	lr
 8002254:	200000e0 	.word	0x200000e0

08002258 <_isatty>:
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <_isatty+0xc>)
 800225a:	2258      	movs	r2, #88	; 0x58
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	2000      	movs	r0, #0
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	200000e0 	.word	0x200000e0

08002268 <_lseek>:
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <_lseek+0xc>)
 800226a:	2258      	movs	r2, #88	; 0x58
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002272:	4770      	bx	lr
 8002274:	200000e0 	.word	0x200000e0

08002278 <_read>:
 8002278:	4b02      	ldr	r3, [pc, #8]	; (8002284 <_read+0xc>)
 800227a:	2258      	movs	r2, #88	; 0x58
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002282:	4770      	bx	lr
 8002284:	200000e0 	.word	0x200000e0

08002288 <_sbrk>:
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <_sbrk+0x14>)
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	4602      	mov	r2, r0
 800228e:	b909      	cbnz	r1, 8002294 <_sbrk+0xc>
 8002290:	4903      	ldr	r1, [pc, #12]	; (80022a0 <_sbrk+0x18>)
 8002292:	6019      	str	r1, [r3, #0]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	4402      	add	r2, r0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	4770      	bx	lr
 800229c:	200000b4 	.word	0x200000b4
 80022a0:	200000e8 	.word	0x200000e8

080022a4 <_write>:
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <_write+0xc>)
 80022a6:	2258      	movs	r2, #88	; 0x58
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ae:	4770      	bx	lr
 80022b0:	200000e0 	.word	0x200000e0

080022b4 <_init>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr

080022c0 <_fini>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr
